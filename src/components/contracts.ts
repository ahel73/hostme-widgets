// tslint:disable
/**
 * Qa mobile api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: mb
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as url from "url";


// let BASE_PATH = API_CORE.replace(/\/+$/, "");
// /**
//  *
//  * @export
//  */
// export const COLLECTION_FORMATS = {
//     csv: ",",
//     ssv: " ",
//     tsv: "\t",
//     pipes: "|"
// };

// /**
//  *
//  * @export
//  * @interface FetchAPI
//  */
// export interface FetchAPI {
//     (url: string, init?: any): Promise<Response>;
// }

// /**
//  *
//  * @export
//  * @interface FetchArgs
//  */
// export interface FetchArgs {
//     url: string;
//     options: any;
// }

// /**
//  *
//  * @export
//  * @class BaseAPI
//  */
// export class BaseAPI {
//     // @ts-ignore
//     protected configuration: Configuration;

//     constructor(
//         configuration?: Configuration,
//         protected basePath: string = BASE_PATH,
//         protected fetch: FetchAPI = portableFetch
//     ) {
//         if (configuration) {
//             this.configuration = configuration;
//             this.basePath = configuration.basePath || this.basePath;
//         }
//     }
// }

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    // @ts-ignore
    name: "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 *
 * @export
 * @interface AdditionalInfo
 */
export interface AdditionalInfo {
    /**
     *
     * @type {boolean}
     * @memberof AdditionalInfo
     */
    allergy?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof AdditionalInfo
     */
    vegetarian?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof AdditionalInfo
     */
    event?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof AdditionalInfo
     */
    babyChair?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof AdditionalInfo
     */
    babyCarrier?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof AdditionalInfo
     */
    stroller?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof AdditionalInfo
     */
    vip?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof AdditionalInfo
     */
    booth?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof AdditionalInfo
     */
    highTop?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof AdditionalInfo
     */
    table?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof AdditionalInfo
     */
    handicapAccessible?: boolean;
    /**
     *
     * @type {Array<CustomAdditional>}
     * @memberof AdditionalInfo
     */
    customs?: Array<CustomAdditional>;
}

/**
 *
 * @export
 * @interface Additionals
 */
export interface Additionals {
    /**
     *
     * @type {boolean}
     * @memberof Additionals
     */
    booth?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Additionals
     */
    highTop?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Additionals
     */
    table?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Additionals
     */
    highChair?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Additionals
     */
    babyCarrier?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Additionals
     */
    stroller?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Additionals
     */
    party?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof Additionals
     */
    eventTypes?: Array<string>;
    /**
     *
     * @type {Array<CustomAdditionalValue>}
     * @memberof Additionals
     */
    customs?: Array<CustomAdditionalValue>;
}

/**
 *
 * @export
 * @interface Address
 */
export interface Address {
    /**
     *
     * @type {string}
     * @memberof Address
     */
    addressString?: string;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    city?: string;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    state?: string;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    country?: string;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    countryShort?: string;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    stateShort?: string;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    zip?: string;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    street?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof Address
     */
    neighborhoods?: Array<string>;
}

/**
 *
 * @export
 * @interface Booking
 */
export interface Booking {
    /**
     *
     * @type {string}
     * @memberof Booking
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Booking
     */
    customerName?: string;
    /**
     *
     * @type {string}
     * @memberof Booking
     */
    phone?: string;
    /**
     *
     * @type {string}
     * @memberof Booking
     */
    status?: string;
    /**
     *
     * @type {string}
     * @memberof Booking
     */
    areas?: string;
    /**
     *
     * @type {string}
     * @memberof Booking
     */
    internalNotes?: string;
    /**
     *
     * @type {string}
     * @memberof Booking
     */
    specialRequests?: string;
    /**
     *
     * @type {string}
     * @memberof Booking
     */
    aboutGuestNotes?: string;
    /**
     *
     * @type {string}
     * @memberof Booking
     */
    depositStatus?: string;
    /**
     *
     * @type {string}
     * @memberof Booking
     */
    tableNumber?: string;
    /**
     *
     * @type {string}
     * @memberof Booking
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof Booking
     */
    source?: string;
    /**
     *
     * @type {string}
     * @memberof Booking
     */
    deliveryType?: string;
    /**
     *
     * @type {string}
     * @memberof Booking
     */
    type?: string;
    /**
     *
     * @type {string}
     * @memberof Booking
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof Booking
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof Booking
     */
    state?: string;
    /**
     *
     * @type {string}
     * @memberof Booking
     */
    messageThreadId?: string;
    /**
     *
     * @type {boolean}
     * @memberof Booking
     */
    approvalRequired?: boolean;
    /**
     *
     * @type {string}
     * @memberof Booking
     */
    paymentCustomerId?: string;
    /**
     *
     * @type {Date}
     * @memberof Booking
     */
    created?: Date;
    /**
     *
     * @type {Date}
     * @memberof Booking
     */
    closed?: Date;
    /**
     *
     * @type {Date}
     * @memberof Booking
     */
    reservationTime?: Date;
    /**
     *
     * @type {Date}
     * @memberof Booking
     */
    expectedTime?: Date;
    /**
     *
     * @type {Date}
     * @memberof Booking
     */
    statusTime?: Date;
    /**
     *
     * @type {Date}
     * @memberof Booking
     */
    estimatedReleaseTime?: Date;
    /**
     *
     * @type {Date}
     * @memberof Booking
     */
    registrationTime?: Date;
    /**
     *
     * @type {number}
     * @memberof Booking
     */
    eventId?: number;
    /**
     *
     * @type {number}
     * @memberof Booking
     */
    groupSize?: number;
    /**
     *
     * @type {number}
     * @memberof Booking
     */
    unreadMessageCount?: number;
    /**
     *
     * @type {number}
     * @memberof Booking
     */
    amount?: number;
    /**
     *
     * @type {number}
     * @memberof Booking
     */
    receiptAmount?: number;
    /**
     *
     * @type {boolean}
     * @memberof Booking
     */
    autoSeat?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Booking
     */
    cardAttached?: boolean;
    /**
     *
     * @type {MembershipInfo}
     * @memberof Booking
     */
    membership?: MembershipInfo;
    /**
     *
     * @type {ReferralInfo}
     * @memberof Booking
     */
    referral?: ReferralInfo;
    /**
     *
     * @type {Array<Waiter>}
     * @memberof Booking
     */
    waiters?: Array<Waiter>;
    /**
     *
     * @type {ProfileData}
     * @memberof Booking
     */
    customerProfile?: ProfileData;
    /**
     *
     * @type {Additionals}
     * @memberof Booking
     */
    additionals?: Additionals;
    /**
     *
     * @type {number}
     * @memberof Booking
     */
    estimatedTurnOverTime?: number;
    /**
     *
     * @type {string}
     * @memberof Booking
     */
    estimatedTurnOver?: string;
}

/**
 *
 * @export
 * @interface BuildGuestAvailability
 */
export interface BuildGuestAvailability {
    /**
     *
     * @type {Date}
     * @memberof BuildGuestAvailability
     */
    date?: Date;
    /**
     *
     * @type {number}
     * @memberof BuildGuestAvailability
     */
    partySize?: number;
    /**
     *
     * @type {number}
     * @memberof BuildGuestAvailability
     */
    rangeInMinutes?: number;
    /**
     *
     * @type {string}
     * @memberof BuildGuestAvailability
     */
    areas?: string;
}

/**
 *
 * @export
 * @interface BusinessHours
 */
export interface BusinessHours {
    /**
     *
     * @type {Array<WeekDayOpenHours>}
     * @memberof BusinessHours
     */
    openingHours?: Array<WeekDayOpenHours>;
    /**
     *
     * @type {Array<SpecialPeriod>}
     * @memberof BusinessHours
     */
    specialPeriods?: Array<SpecialPeriod>;
    /**
     *
     * @type {boolean}
     * @memberof BusinessHours
     */
    isOpenNow?: boolean;
    /**
     *
     * @type {Date}
     * @memberof BusinessHours
     */
    nextPeriodDate?: Date;
}

/**
 *
 * @export
 * @interface CancelReservation
 */
export interface CancelReservation {
    /**
     *
     * @type {string}
     * @memberof CancelReservation
     */
    note?: string;
    /**
     *
     * @type {string}
     * @memberof CancelReservation
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof CancelReservation
     */
    origin?: string;
}

/**
 *
 * @export
 * @interface CreateMobileReservation
 */
export interface CreateMobileReservation {
    /**
     *
     * @type {Date}
     * @memberof CreateMobileReservation
     */
    reservationTime?: any;
    /**
     *
     * @type {number}
     * @memberof CreateMobileReservation
     */
    groupSize?: number;
    /**
     *
     * @type {number}
     * @memberof CreateMobileReservation
     */
    restaurantId?: number;
    /**
     *
     * @type {string}
     * @memberof CreateMobileReservation
     */
    externalUserId?: string;
    /**
     *
     * @type {string}
     * @memberof CreateMobileReservation
     */
    customerName?: string;
    /**
     *
     * @type {string}
     * @memberof CreateMobileReservation
     */
    phoneNumber?: string;
    /**
     *
     * @type {string}
     * @memberof CreateMobileReservation
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof CreateMobileReservation
     */
    areas?: string;
    /**
     *
     * @type {string}
     * @memberof CreateMobileReservation
     */
    tableNumber?: string;
    /**
     *
     * @type {string}
     * @memberof CreateMobileReservation
     */
    specialRequests?: string;
    /**
     *
     * @type {string}
     * @memberof CreateMobileReservation
     */
    aboutGuestNotes?: string;
    /**
     *
     * @type {string}
     * @memberof CreateMobileReservation
     */
    language?: string;
    /**
     *
     * @type {Additionals}
     * @memberof CreateMobileReservation
     */
    additionals?: Additionals;
    /**
     *
     * @type {string}
     * @memberof CreateMobileReservation
     */
    depositToken?: string;
    /**
     *
     * @type {ProfileData}
     * @memberof CreateMobileReservation
     */
    customerProfile?: ProfileData;
    /**
     *
     * @type {string}
     * @memberof CreateMobileReservation
     */
    campaignInfo?: string;
    /**
     *
     * @type {number}
     * @memberof CreateMobileReservation
     */
    eventId?: number;
    /**
     *
     * @type {string}
     * @memberof CreateMobileReservation
     */
    deliveryType?: string;
    /**
     *
     * @type {OnlineOrder}
     * @memberof CreateMobileReservation
     */
    order?: OnlineOrder;
}

/**
 *
 * @export
 * @interface CreateMobileWalkin
 */
export interface CreateMobileWalkin {
    /**
     *
     * @type {number}
     * @memberof CreateMobileWalkin
     */
    restaurantId?: number;
    /**
     *
     * @type {number}
     * @memberof CreateMobileWalkin
     */
    groupSize?: number;
    /**
     *
     * @type {number}
     * @memberof CreateMobileWalkin
     */
    expectedTime?: number;
    /**
     *
     * @type {string}
     * @memberof CreateMobileWalkin
     */
    externalUserId?: string;
    /**
     *
     * @type {string}
     * @memberof CreateMobileWalkin
     */
    customerName?: string;
    /**
     *
     * @type {string}
     * @memberof CreateMobileWalkin
     */
    phone?: string;
    /**
     *
     * @type {string}
     * @memberof CreateMobileWalkin
     */
    areas?: string;
    /**
     *
     * @type {string}
     * @memberof CreateMobileWalkin
     */
    specialRequests?: string;
    /**
     *
     * @type {string}
     * @memberof CreateMobileWalkin
     */
    aboutGuestNotes?: string;
    /**
     *
     * @type {string}
     * @memberof CreateMobileWalkin
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof CreateMobileWalkin
     */
    campaignInfo?: string;
    /**
     *
     * @type {Additionals}
     * @memberof CreateMobileWalkin
     */
    additionals?: Additionals;
    /**
     *
     * @type {ProfileData}
     * @memberof CreateMobileWalkin
     */
    customerProfile?: ProfileData;
}

/**
 *
 * @export
 * @interface CustomAdditional
 */
export interface CustomAdditional {
    /**
     *
     * @type {string}
     * @memberof CustomAdditional
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof CustomAdditional
     */
    type?: string;
    /**
     *
     * @type {string}
     * @memberof CustomAdditional
     */
    label?: string;
    /**
     *
     * @type {string}
     * @memberof CustomAdditional
     */
    icon?: string;
    /**
     *
     * @type {string}
     * @memberof CustomAdditional
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof CustomAdditional
     */
    data?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof CustomAdditional
     */
    online?: boolean;
}

/**
 *
 * @export
 * @interface CustomAdditionalValue
 */
export interface CustomAdditionalValue {
    /**
     *
     * @type {string}
     * @memberof CustomAdditionalValue
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof CustomAdditionalValue
     */
    value?: string;

    icon?: string;

    description?: string;

    online?: boolean;

    type?: string;
}

/**
 *
 * @export
 * @interface DepositEvent
 */
export interface DepositEvent {
    /**
     *
     * @type {Date}
     * @memberof DepositEvent
     */
    starts?: Date;
    /**
     *
     * @type {Date}
     * @memberof DepositEvent
     */
    ends?: Date;
    /**
     *
     * @type {Array<HourlyInterval>}
     * @memberof DepositEvent
     */
    time?: Array<HourlyInterval>;
    /**
     *
     * @type {{ [key: string]: number; }}
     * @memberof DepositEvent
     */
    depositRules?: { [key: string]: number };
}

/**
 *
 * @export
 * @interface EventInfo
 */
export interface EventInfo {
    /**
     *
     * @type {string}
     * @memberof EventInfo
     */
    name?: string;
    /**
     *
     * @type {number}
     * @memberof EventInfo
     */
    id?: number;
    /**
     *
     * @type {Array<EventTicket>}
     * @memberof EventInfo
     */
    tickets?: Array<EventTicket>;
}

/**
 *
 * @export
 * @interface EventTicket
 */
export interface EventTicket {
    /**
     *
     * @type {string}
     * @memberof EventTicket
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof EventTicket
     */
    type?: string;
    /**
     *
     * @type {number}
     * @memberof EventTicket
     */
    eventId?: number;
    /**
     *
     * @type {number}
     * @memberof EventTicket
     */
    amount?: number;
    /**
     *
     * @type {string}
     * @memberof EventTicket
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof EventTicket
     */
    description?: string;
}

/**
 *
 * @export
 * @interface ExpectedTime
 */
export interface ExpectedTime {
    /**
     *
     * @type {{ [key: string]: number; }}
     * @memberof ExpectedTime
     */
    expectedMinutesForSizes?: { [key: string]: number };
}

/**
 *
 * @export
 * @interface GetTableMonitors
 */
export interface GetTableMonitors {
    /**
     *
     * @type {boolean}
     * @memberof GetTableMonitors
     */
    withNextSlot?: boolean;
    /**
     *
     * @type {Date}
     * @memberof GetTableMonitors
     */
    time?: Date;
    /**
     *
     * @type {number}
     * @memberof GetTableMonitors
     */
    tableTurnOver?: number;
    /**
     *
     * @type {string}
     * @memberof GetTableMonitors
     */
    excludeId?: string;
}

/**
 *
 * @export
 * @interface GuestReservationListResponse
 */
export interface GuestReservationListResponse {
    /**
     *
     * @type {Array<ReservationGuest>}
     * @memberof GuestReservationListResponse
     */
    reservations?: Array<ReservationGuest>;
    /**
     *
     * @type {number}
     * @memberof GuestReservationListResponse
     */
    total?: number;
}

/**
 *
 * @export
 * @interface GuestWalkinListResponse
 */
export interface GuestWalkinListResponse {
    /**
     *
     * @type {Array<WalkinGuest>}
     * @memberof GuestWalkinListResponse
     */
    walkins?: Array<WalkinGuest>;
    /**
     *
     * @type {number}
     * @memberof GuestWalkinListResponse
     */
    total?: number;
}

/**
 *
 * @export
 * @interface GuestWalkinsData
 */
export interface GuestWalkinsData {
    /**
     *
     * @type {Array<string>}
     * @memberof GuestWalkinsData
     */
    restaurantIds?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof GuestWalkinsData
     */
    statuses?: Array<string>;
}

/**
 *
 * @export
 * @interface HourlyInterval
 */
export interface HourlyInterval {
    /**
     *
     * @type {string}
     * @memberof HourlyInterval
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof HourlyInterval
     */
    close?: string;
    /**
     *
     * @type {string}
     * @memberof HourlyInterval
     */
    open?: string;
}

/**
 *
 * @export
 * @interface IntentSecret
 */
export interface IntentSecret {
    /**
     *
     * @type {string}
     * @memberof IntentSecret
     */
    secret?: string;
}

/**
 *
 * @export
 * @interface MembershipInfo
 */
export interface MembershipInfo {
    /**
     *
     * @type {number}
     * @memberof MembershipInfo
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof MembershipInfo
     */
    membershipLevel?: string;
    /**
     *
     * @type {number}
     * @memberof MembershipInfo
     */
    points?: number;
    /**
     *
     * @type {string}
     * @memberof MembershipInfo
     */
    language?: string;
    /**
     *
     * @type {string}
     * @memberof MembershipInfo
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof MembershipInfo
     */
    fullName?: string;
    /**
     *
     * @type {string}
     * @memberof MembershipInfo
     */
    phone?: string;
    /**
     *
     * @type {ProfileData}
     * @memberof MembershipInfo
     */
    customerProfile?: ProfileData;
    /**
     *
     * @type {string}
     * @memberof MembershipInfo
     */
    aboutGuestNotes?: string;
}

/**
 *
 * @export
 * @interface Menu
 */
export interface Menu {
    /**
     *
     * @type {string}
     * @memberof Menu
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof Menu
     */
    description?: string;
    /**
     *
     * @type {any}
     * @memberof Menu
     */
    menuSection?: any;
    /**
     *
     * @type {string}
     * @memberof Menu
     */
    inLanguage?: string;
    /**
     *
     * @type {string}
     * @memberof Menu
     */
    mobileUrl?: string;
    /**
     *
     * @type {string}
     * @memberof Menu
     */
    url?: string;
    /**
     *
     * @type {string}
     * @memberof Menu
     */
    type?: string;
}

/**
 *
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     *
     * @type {any}
     * @memberof ModelError
     */
    exception?: any;
    /**
     *
     * @type {string}
     * @memberof ModelError
     */
    errorMessage?: string;
}

/**
 *
 * @export
 * @interface ModelState
 */
export interface ModelState {
    /**
     *
     * @type {ValueProviderResult}
     * @memberof ModelState
     */
    value?: ValueProviderResult;
    /**
     *
     * @type {Array<ModelError>}
     * @memberof ModelState
     */
    errors?: Array<ModelError>;
}

/**
 *
 * @export
 * @interface OnlineOrder
 */
export interface OnlineOrder {
    /**
     *
     * @type {Array<OnlineOrderItem>}
     * @memberof OnlineOrder
     */
    orderItems?: Array<OnlineOrderItem>;
    /**
     *
     * @type {string}
     * @memberof OnlineOrder
     */
    note?: string;
}

/**
 *
 * @export
 * @interface OnlineOrderItem
 */
export interface OnlineOrderItem {
    /**
     *
     * @type {string}
     * @memberof OnlineOrderItem
     */
    productId?: string;
    /**
     *
     * @type {number}
     * @memberof OnlineOrderItem
     */
    amount?: number;
}

/**
 *
 * @export
 * @interface PartyMembersInvitation
 */
export interface PartyMembersInvitation {
    /**
     *
     * @type {Array<string>}
     * @memberof PartyMembersInvitation
     */
    members?: Array<string>;
}

/**
 *
 * @export
 * @interface Photo
 */
export interface Photo {
    /**
     *
     * @type {string}
     * @memberof Photo
     */
    id?: string;
    /**
     *
     * @type {number}
     * @memberof Photo
     */
    height?: number;
    /**
     *
     * @type {string}
     * @memberof Photo
     */
    photoUrl?: string;
    /**
     *
     * @type {number}
     * @memberof Photo
     */
    width?: number;
    /**
     *
     * @type {string}
     * @memberof Photo
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof Photo
     */
    tags?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof Photo
     */
    categories?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof Photo
     */
    domainId?: string;
    /**
     *
     * @type {number}
     * @memberof Photo
     */
    providerId?: number;
    /**
     *
     * @type {boolean}
     * @memberof Photo
     */
    hidden?: boolean;
}

/**
 *
 * @export
 * @interface PlaceIds
 */
export interface PlaceIds {
    /**
     *
     * @type {string}
     * @memberof PlaceIds
     */
    hostmeId?: string;
    /**
     *
     * @type {string}
     * @memberof PlaceIds
     */
    googlePlaceId?: string;
    /**
     *
     * @type {string}
     * @memberof PlaceIds
     */
    yelpId?: string;
    /**
     *
     * @type {string}
     * @memberof PlaceIds
     */
    yellowPagesId?: string;
    /**
     *
     * @type {string}
     * @memberof PlaceIds
     */
    resyId?: string;
    /**
     *
     * @type {string}
     * @memberof PlaceIds
     */
    tripAdvisorId?: string;
    /**
     *
     * @type {string}
     * @memberof PlaceIds
     */
    foursquareId?: string;
    /**
     *
     * @type {string}
     * @memberof PlaceIds
     */
    openTableId?: string;
    /**
     *
     * @type {string}
     * @memberof PlaceIds
     */
    reserveId?: string;
    /**
     *
     * @type {string}
     * @memberof PlaceIds
     */
    bingPlaceId?: string;
    /**
     *
     * @type {string}
     * @memberof PlaceIds
     */
    facebookId?: string;
}

/**
 *
 * @export
 * @interface ProfileData
 */
export interface ProfileData {
    /**
     *
     * @type {Array<string>}
     * @memberof ProfileData
     */
    allergy?: Array<string>;
    /**
     *
     * @type {Date}
     * @memberof ProfileData
     */
    dob?: Date;
    /**
     *
     * @type {boolean}
     * @memberof ProfileData
     */
    vegetarian?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ProfileData
     */
    vip?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ProfileData
     */
    handicapAccessible?: boolean;
    /**
     *
     * @type {Date}
     * @memberof ProfileData
     */
    anniversary?: Date;
    /**
     *
     * @type {string}
     * @memberof ProfileData
     */
    companyName?: string;
    /**
     *
     * @type {string}
     * @memberof ProfileData
     */
    officePhone?: string;
    /**
     *
     * @type {string}
     * @memberof ProfileData
     */
    officeAddress?: string;
    /**
     *
     * @type {string}
     * @memberof ProfileData
     */
    tablePreferences?: string;
    /**
     *
     * @type {string}
     * @memberof ProfileData
     */
    deliveryAddress?: string;
}

/**
 *
 * @export
 * @interface RedeemReservationInvitation
 */
export interface RedeemReservationInvitation {
    /**
     *
     * @type {string}
     * @memberof RedeemReservationInvitation
     */
    code: string;
    /**
     *
     * @type {string}
     * @memberof RedeemReservationInvitation
     */
    email: string;
    /**
     *
     * @type {string}
     * @memberof RedeemReservationInvitation
     */
    phoneNumber: string;
    /**
     *
     * @type {string}
     * @memberof RedeemReservationInvitation
     */
    fullName: string;
    /**
     *
     * @type {string}
     * @memberof RedeemReservationInvitation
     */
    language?: string;
    /**
     *
     * @type {ProfileData}
     * @memberof RedeemReservationInvitation
     */
    customerProfile?: ProfileData;
}

/**
 *
 * @export
 * @interface ReferralInfo
 */
export interface ReferralInfo {
    /**
     *
     * @type {number}
     * @memberof ReferralInfo
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof ReferralInfo
     */
    membershipLevel?: string;
    /**
     *
     * @type {number}
     * @memberof ReferralInfo
     */
    points?: number;
    /**
     *
     * @type {string}
     * @memberof ReferralInfo
     */
    language?: string;
    /**
     *
     * @type {string}
     * @memberof ReferralInfo
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof ReferralInfo
     */
    fullName?: string;
    /**
     *
     * @type {string}
     * @memberof ReferralInfo
     */
    phone?: string;
    /**
     *
     * @type {ProfileData}
     * @memberof ReferralInfo
     */
    customerProfile?: ProfileData;
    /**
     *
     * @type {string}
     * @memberof ReferralInfo
     */
    aboutGuestNotes?: string;
}

/**
 *
 * @export
 * @interface ReservationGuest
 */
export interface ReservationGuest {
    /**
     *
     * @type {string}
     * @memberof ReservationGuest
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ReservationGuest
     */
    feedbackUrl?: string;
    /**
     *
     * @type {string}
     * @memberof ReservationGuest
     */
    timeZone?: string;
    /**
     *
     * @type {string}
     * @memberof ReservationGuest
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof ReservationGuest
     */
    status?: string;
    /**
     *
     * @type {string}
     * @memberof ReservationGuest
     */
    customerName?: string;
    /**
     *
     * @type {string}
     * @memberof ReservationGuest
     */
    phone?: string;
    /**
     *
     * @type {string}
     * @memberof ReservationGuest
     */
    areas?: string;
    /**
     *
     * @type {string}
     * @memberof ReservationGuest
     */
    specialRequests?: string;
    /**
     *
     * @type {string}
     * @memberof ReservationGuest
     */
    tableNumber?: string;
    /**
     *
     * @type {string}
     * @memberof ReservationGuest
     */
    depositStatus?: string;
    /**
     *
     * @type {string}
     * @memberof ReservationGuest
     */
    source?: string;
    /**
     *
     * @type {string}
     * @memberof ReservationGuest
     */
    type?: string;
    /**
     *
     * @type {boolean}
     * @memberof ReservationGuest
     */
    approvalRequired?: boolean;
    /**
     *
     * @type {Date}
     * @memberof ReservationGuest
     */
    created?: Date;
    /**
     *
     * @type {Date}
     * @memberof ReservationGuest
     */
    closed?: Date;
    /**
     *
     * @type {Date}
     * @memberof ReservationGuest
     */
    reservationTime?: Date;
    /**
     *
     * @type {number}
     * @memberof ReservationGuest
     */
    groupSize?: number;
    /**
     *
     * @type {number}
     * @memberof ReservationGuest
     */
    restaurantId?: number;
    /**
     *
     * @type {number}
     * @memberof ReservationGuest
     */
    amount?: number;
    /**
     *
     * @type {Array<string>}
     * @memberof ReservationGuest
     */
    roles?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof ReservationGuest
     */
    token?: string;
    /**
     *
     * @type {boolean}
     * @memberof ReservationGuest
     */
    noShowFeeEnabled?: boolean;
    /**
     *
     * @type {string}
     * @memberof ReservationGuest
     */
    currency?: string;
    /**
     *
     * @type {Array<Waiter>}
     * @memberof ReservationGuest
     */
    waiters?: Array<Waiter>;
    /**
     *
     * @type {ProfileData}
     * @memberof ReservationGuest
     */
    customerProfile?: ProfileData;
    /**
     *
     * @type {Additionals}
     * @memberof ReservationGuest
     */
    additionals?: Additionals;
    /**
     *
     * @type {number}
     * @memberof ReservationGuest
     */
    estimatedTurnOverTime?: number;
    /**
     *
     * @type {string}
     * @memberof ReservationGuest
     */
    estimatedTurnOver?: string;
    paymentType: any;
    deliveryType: "delivery" | "pickup" | "preorder";
}

/**
 *
 * @export
 * @interface ReservationInvitation
 */
export interface ReservationInvitation {
    /**
     *
     * @type {string}
     * @memberof ReservationInvitation
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof ReservationInvitation
     */
    phoneNumber?: string;
    /**
     *
     * @type {RestaurantInfo}
     * @memberof ReservationInvitation
     */
    restaurant?: RestaurantInfo;
    /**
     *
     * @type {number}
     * @memberof ReservationInvitation
     */
    groupSize?: number;
    /**
     *
     * @type {boolean}
     * @memberof ReservationInvitation
     */
    isRedeemed?: boolean;
    /**
     *
     * @type {Date}
     * @memberof ReservationInvitation
     */
    reservationTime?: Date;
    /**
     *
     * @type {string}
     * @memberof ReservationInvitation
     */
    reservationStatus?: string;
    /**
     *
     * @type {Additionals}
     * @memberof ReservationInvitation
     */
    additionals?: Additionals;
}

/**
 *
 * @export
 * @interface RestaurantInfo
 */
export interface RestaurantInfo {
    /**
     *
     * @type {number}
     * @memberof RestaurantInfo
     */
    id?: number;
    /**
     *
     * @type {number}
     * @memberof RestaurantInfo
     */
    hoursInterval?: number;
    /**
     *
     * @type {number}
     * @memberof RestaurantInfo
     */
    maxPartySize?: number;
    /**
     *
     * @type {number}
     * @memberof RestaurantInfo
     */
    minPartySize?: number;
    /**
     *
     * @type {number}
     * @memberof RestaurantInfo
     */
    chargeIfCancelledBefore?: number;
    /**
     *
     * @type {number}
     * @memberof RestaurantInfo
     */
    maxAdvanceBookingDays?: number;
    /**
     *
     * @type {boolean}
     * @memberof RestaurantInfo
     */
    chargeIfCancelledBeforeTimeEnabled?: boolean;
    /**
     *
     * @type {string}
     * @memberof RestaurantInfo
     */
    chargeIfCancelledBeforeTime?: string;
    /**
     *
     * @type {string}
     * @memberof RestaurantInfo
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof RestaurantInfo
     */
    address?: string;
    /**
     *
     * @type {string}
     * @memberof RestaurantInfo
     */
    imageUrl?: string;
    /**
     *
     * @type {string}
     * @memberof RestaurantInfo
     */
    facebookId?: string;
    /**
     *
     * @type {string}
     * @memberof RestaurantInfo
     */
    twitterAccount?: string;
    /**
     *
     * @type {string}
     * @memberof RestaurantInfo
     */
    websiteUrl?: string;
    /**
     *
     * @type {string}
     * @memberof RestaurantInfo
     */
    phone?: string;
    /**
     *
     * @type {string}
     * @memberof RestaurantInfo
     */
    timeZone?: string;
    /**
     *
     * @type {string}
     * @memberof RestaurantInfo
     */
    city?: string;
    /**
     *
     * @type {string}
     * @memberof RestaurantInfo
     */
    country?: string;
    /**
     *
     * @type {string}
     * @memberof RestaurantInfo
     */
    zip?: string;
    /**
     *
     * @type {string}
     * @memberof RestaurantInfo
     */
    guestReservationNote?: string;
    /**
     *
     * @type {string}
     * @memberof RestaurantInfo
     */
    currency?: string;
    /**
     *
     * @type {AdditionalInfo}
     * @memberof RestaurantInfo
     */
    additionalInfo?: AdditionalInfo;
    /**
     *
     * @type {BusinessHours}
     * @memberof RestaurantInfo
     */
    openingHours?: BusinessHours;
    /**
     *
     * @type {BusinessHours}
     * @memberof RestaurantInfo
     */
    reservationHours?: BusinessHours;
    /**
     *
     * @type {Array<SpecialPeriod>}
     * @memberof RestaurantInfo
     */
    specialPeriods?: Array<SpecialPeriod>;
    /**
     *
     * @type {Array<DepositEvent>}
     * @memberof RestaurantInfo
     */
    depositEvents?: Array<DepositEvent>;
    /**
     *
     * @type {UICustomization}
     * @memberof RestaurantInfo
     */
    uiCustomization?: UICustomization;
    /**
     *
     * @type {Array<string>}
     * @memberof RestaurantInfo
     */
    areas?: Array<string>;
    /**
     *
     * @type {{ [key: string]: number; }}
     * @memberof RestaurantInfo
     */
    depositRules?: { [key: string]: number };
    /**
     *
     * @type {number}
     * @memberof RestaurantInfo
     */
    lat?: number;
    /**
     *
     * @type {number}
     * @memberof RestaurantInfo
     */
    lon?: number;
    /**
     *
     * @type {boolean}
     * @memberof RestaurantInfo
     */
    noShowFeeEnabled?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof RestaurantInfo
     */
    creditCardChargeEnabled?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof RestaurantInfo
     */
    approvalRequired?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof RestaurantInfo
     */
    hasHostmeSystem?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof RestaurantInfo
     */
    hasLoyaltyProgram?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof RestaurantInfo
     */
    acceptReservation?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof RestaurantInfo
     */
    allowManualHold?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof RestaurantInfo
     */
    allowGuestSelectTables?: boolean;
    /**
     *
     * @type {Date}
     * @memberof RestaurantInfo
     */
    startDate?: Date;
    /**
     *
     * @type {Date}
     * @memberof RestaurantInfo
     */
    endDate?: Date;
    /**
     *
     * @type {string}
     * @memberof RestaurantInfo
     */
    type?: string;
}

/**
 *
 * @export
 * @interface RestaurantPublicProfile
 */
export interface RestaurantPublicProfile {
    /**
     *
     * @type {string}
     * @memberof RestaurantPublicProfile
     */
    hostmeGlobalId?: string;
    /**
     *
     * @type {string}
     * @memberof RestaurantPublicProfile
     */
    hostmeRestaurantId?: string;
    /**
     *
     * @type {string}
     * @memberof RestaurantPublicProfile
     */
    name?: string;
    /**
     *
     * @type {Address}
     * @memberof RestaurantPublicProfile
     */
    address?: Address;
    /**
     *
     * @type {number}
     * @memberof RestaurantPublicProfile
     */
    lat?: number;
    /**
     *
     * @type {number}
     * @memberof RestaurantPublicProfile
     */
    lon?: number;
    /**
     *
     * @type {string}
     * @memberof RestaurantPublicProfile
     */
    phone?: string;
    /**
     *
     * @type {string}
     * @memberof RestaurantPublicProfile
     */
    website?: string;
    /**
     *
     * @type {string}
     * @memberof RestaurantPublicProfile
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof RestaurantPublicProfile
     */
    logo?: string;
    /**
     *
     * @type {string}
     * @memberof RestaurantPublicProfile
     */
    promoImage?: string;
    /**
     *
     * @type {number}
     * @memberof RestaurantPublicProfile
     */
    price?: number;
    /**
     *
     * @type {SocialLinks}
     * @memberof RestaurantPublicProfile
     */
    socialLinks?: SocialLinks;
    /**
     *
     * @type {PlaceIds}
     * @memberof RestaurantPublicProfile
     */
    placeIds?: PlaceIds;
    /**
     *
     * @type {Services}
     * @memberof RestaurantPublicProfile
     */
    services?: Services;
    /**
     *
     * @type {Array<string>}
     * @memberof RestaurantPublicProfile
     */
    categories?: Array<string>;
    /**
     *
     * @type {Array<Photo>}
     * @memberof RestaurantPublicProfile
     */
    photos?: Array<Photo>;
    /**
     *
     * @type {Menu}
     * @memberof RestaurantPublicProfile
     */
    menu?: Menu;
    /**
     *
     * @type {string}
     * @memberof RestaurantPublicProfile
     */
    timeZone?: string;
    /**
     *
     * @type {BusinessHours}
     * @memberof RestaurantPublicProfile
     */
    openingHours?: BusinessHours;
    /**
     *
     * @type {Array<string>}
     * @memberof RestaurantPublicProfile
     */
    cuisine?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof RestaurantPublicProfile
     */
    hideFromSearch?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof RestaurantPublicProfile
     */
    isOffline?: boolean;
    /**
     *
     * @type {string}
     * @memberof RestaurantPublicProfile
     */
    applicationId?: string;
    /**
     *
     * @type {string}
     * @memberof RestaurantPublicProfile
     */
    type?: string;
    /**
     *
     * @type {number}
     * @memberof RestaurantPublicProfile
     */
    parentRestaurantId?: number;
    /**
     *
     * @type {Date}
     * @memberof RestaurantPublicProfile
     */
    startDate?: Date;
    /**
     *
     * @type {Date}
     * @memberof RestaurantPublicProfile
     */
    endDate?: Date;
    /**
     *
     * @type {Array<Date>}
     * @memberof RestaurantPublicProfile
     */
    dates?: Array<Date>;
    /**
     *
     * @type {boolean}
     * @memberof RestaurantPublicProfile
     */
    googleReserve?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof RestaurantPublicProfile
     */
    tripAdvisorReserve?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof RestaurantPublicProfile
     */
    bingReserve?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof RestaurantPublicProfile
     */
    instagramReserve?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof RestaurantPublicProfile
     */
    facebookReserve?: boolean;

    reservationConfig?: any;
}

/**
 *
 * @export
 * @interface RestaurantState
 */
export interface RestaurantState {
    /**
     *
     * @type {boolean}
     * @memberof RestaurantState
     */
    isOpen?: boolean;
    /**
     *
     * @type {Array<TableMonitor>}
     * @memberof RestaurantState
     */
    monitors?: Array<TableMonitor>;
    /**
     *
     * @type {Array<Waiter>}
     * @memberof RestaurantState
     */
    serversRotation?: Array<Waiter>;
    /**
     *
     * @type {Array<EventInfo>}
     * @memberof RestaurantState
     */
    events?: Array<EventInfo>;
}

/**
 *
 * @export
 * @interface SendFeedback
 */
export interface SendFeedback {
    /**
     *
     * @type {string}
     * @memberof SendFeedback
     */
    note?: string;
    /**
     *
     * @type {number}
     * @memberof SendFeedback
     */
    rating?: number;
    /**
     *
     * @type {string}
     * @memberof SendFeedback
     */
    email?: string;
}

/**
 *
 * @export
 * @interface Services
 */
export interface Services {
    /**
     *
     * @type {boolean}
     * @memberof Services
     */
    delivery?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Services
     */
    catering?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Services
     */
    groups?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Services
     */
    kids?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Services
     */
    outdoor?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Services
     */
    reserve?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Services
     */
    waitlist?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Services
     */
    takeout?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Services
     */
    waiter?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Services
     */
    walkins?: boolean;
}

/**
 *
 * @export
 * @interface SocialLinks
 */
export interface SocialLinks {
    /**
     *
     * @type {string}
     * @memberof SocialLinks
     */
    facebook?: string;
    /**
     *
     * @type {string}
     * @memberof SocialLinks
     */
    twitter?: string;
    /**
     *
     * @type {string}
     * @memberof SocialLinks
     */
    googlePlus?: string;
    /**
     *
     * @type {string}
     * @memberof SocialLinks
     */
    instagram?: string;
    /**
     *
     * @type {string}
     * @memberof SocialLinks
     */
    youtube?: string;
    /**
     *
     * @type {string}
     * @memberof SocialLinks
     */
    pinterest?: string;
}

/**
 *
 * @export
 * @interface SpecialPeriod
 */
export interface SpecialPeriod {
    /**
     *
     * @type {boolean}
     * @memberof SpecialPeriod
     */
    repeat?: boolean;
    /**
     *
     * @type {Date}
     * @memberof SpecialPeriod
     */
    starts?: Date;
    /**
     *
     * @type {Date}
     * @memberof SpecialPeriod
     */
    ends?: Date;
    /**
     *
     * @type {Array<HourlyInterval>}
     * @memberof SpecialPeriod
     */
    time?: Array<HourlyInterval>;
    /**
     *
     * @type {boolean}
     * @memberof SpecialPeriod
     */
    closed?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof SpecialPeriod
     */
    isSystem?: boolean;
}

/**
 *
 * @export
 * @interface TableMonitor
 */
export interface TableMonitor {
    /**
     *
     * @type {string}
     * @memberof TableMonitor
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof TableMonitor
     */
    tableNumber?: string;
    /**
     *
     * @type {string}
     * @memberof TableMonitor
     */
    state?: string;
    /**
     *
     * @type {string}
     * @memberof TableMonitor
     */
    type?: string;
    /**
     *
     * @type {number}
     * @memberof TableMonitor
     */
    eventId?: number;
    /**
     *
     * @type {number}
     * @memberof TableMonitor
     */
    receiptAmount?: number;
    /**
     *
     * @type {string}
     * @memberof TableMonitor
     */
    status?: TableMonitor.StatusEnum;
    /**
     *
     * @type {Date}
     * @memberof TableMonitor
     */
    registrationTime?: Date;
    /**
     *
     * @type {Date}
     * @memberof TableMonitor
     */
    reservationTime?: Date;
    /**
     *
     * @type {Date}
     * @memberof TableMonitor
     */
    assignmentTime?: Date;
    /**
     *
     * @type {Date}
     * @memberof TableMonitor
     */
    estimatedReleaseTime?: Date;
    /**
     *
     * @type {Date}
     * @memberof TableMonitor
     */
    nextAvailableSlotTime?: Date;
    /**
     *
     * @type {TableUserInfo}
     * @memberof TableMonitor
     */
    user?: TableUserInfo;
}

/**
 * @export
 * @namespace TableMonitor
 */
export namespace TableMonitor {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Available = <any>"Available",
        Reserved = <any>"Reserved",
        Assigned = <any>"Assigned",
        Busy = <any>"Busy",
        Blocked = <any>"Blocked"
    }
}

/**
 *
 * @export
 * @interface TableUserInfo
 */
export interface TableUserInfo {
    /**
     *
     * @type {string}
     * @memberof TableUserInfo
     */
    id?: string;
    /**
     *
     * @type {number}
     * @memberof TableUserInfo
     */
    groupSize?: number;
    /**
     *
     * @type {number}
     * @memberof TableUserInfo
     */
    amount?: number;
    /**
     *
     * @type {string}
     * @memberof TableUserInfo
     */
    tableNumber?: string;
    /**
     *
     * @type {string}
     * @memberof TableUserInfo
     */
    customerName?: string;
    /**
     *
     * @type {string}
     * @memberof TableUserInfo
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof TableUserInfo
     */
    phone?: string;
    /**
     *
     * @type {string}
     * @memberof TableUserInfo
     */
    specialRequests?: string;
    /**
     *
     * @type {string}
     * @memberof TableUserInfo
     */
    internalNotes?: string;
    /**
     *
     * @type {string}
     * @memberof TableUserInfo
     */
    aboutGuestNotes?: string;
    /**
     *
     * @type {string}
     * @memberof TableUserInfo
     */
    areas?: string;
    /**
     *
     * @type {Date}
     * @memberof TableUserInfo
     */
    reservationTime?: Date;
    /**
     *
     * @type {Array<Waiter>}
     * @memberof TableUserInfo
     */
    waiters?: Array<Waiter>;
    /**
     *
     * @type {ProfileData}
     * @memberof TableUserInfo
     */
    customerProfile?: ProfileData;
    /**
     *
     * @type {Additionals}
     * @memberof TableUserInfo
     */
    additionals?: Additionals;
    /**
     *
     * @type {number}
     * @memberof TableUserInfo
     */
    estimatedTurnOverTime?: number;
    /**
     *
     * @type {string}
     * @memberof TableUserInfo
     */
    estimatedTurnOver?: string;
}

/**
 *
 * @export
 * @interface UICustomization
 */
export interface UICustomization {
    /**
     *
     * @type {string}
     * @memberof UICustomization
     */
    guestThemeColor1?: string;
    /**
     *
     * @type {string}
     * @memberof UICustomization
     */
    guestThemeColor2?: string;
    /**
     *
     * @type {boolean}
     * @memberof UICustomization
     */
    disableLogoInWidgets?: boolean;
}

/**
 *
 * @export
 * @interface ValueProviderResult
 */
export interface ValueProviderResult {
    /**
     *
     * @type {string}
     * @memberof ValueProviderResult
     */
    attemptedValue?: string;
    /**
     *
     * @type {string}
     * @memberof ValueProviderResult
     */
    culture?: string;
    /**
     *
     * @type {any}
     * @memberof ValueProviderResult
     */
    rawValue?: any;
}

/**
 *
 * @export
 * @interface Waiter
 */
export interface Waiter {
    /**
     *
     * @type {number}
     * @memberof Waiter
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof Waiter
     */
    fullName?: string;
    /**
     *
     * @type {string}
     * @memberof Waiter
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof Waiter
     */
    color?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof Waiter
     */
    floors?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof Waiter
     */
    tables?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof Waiter
     */
    totalTables?: number;
    /**
     *
     * @type {number}
     * @memberof Waiter
     */
    busyTables?: number;
    /**
     *
     * @type {number}
     * @memberof Waiter
     */
    workLoad?: number;
    /**
     *
     * @type {number}
     * @memberof Waiter
     */
    shiftBusyTables?: number;
    /**
     *
     * @type {number}
     * @memberof Waiter
     */
    shiftWorkLoad?: number;
    /**
     *
     * @type {string}
     * @memberof Waiter
     */
    image?: string;
    /**
     *
     * @type {Array<Zone>}
     * @memberof Waiter
     */
    zones?: Array<Zone>;
}

/**
 *
 * @export
 * @interface WalkinGuest
 */
export interface WalkinGuest {
    /**
     *
     * @type {string}
     * @memberof WalkinGuest
     */
    id?: string;
    /**
     *
     * @type {number}
     * @memberof WalkinGuest
     */
    restaurantId?: number;
    /**
     *
     * @type {string}
     * @memberof WalkinGuest
     */
    timeZone?: string;
    /**
     *
     * @type {string}
     * @memberof WalkinGuest
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof WalkinGuest
     */
    status?: string;
    /**
     *
     * @type {string}
     * @memberof WalkinGuest
     */
    customerName?: string;
    /**
     *
     * @type {string}
     * @memberof WalkinGuest
     */
    phone?: string;
    /**
     *
     * @type {string}
     * @memberof WalkinGuest
     */
    areas?: string;
    /**
     *
     * @type {string}
     * @memberof WalkinGuest
     */
    specialRequests?: string;
    /**
     *
     * @type {string}
     * @memberof WalkinGuest
     */
    tableNumber?: string;
    /**
     *
     * @type {string}
     * @memberof WalkinGuest
     */
    source?: string;
    /**
     *
     * @type {string}
     * @memberof WalkinGuest
     */
    type?: string;
    /**
     *
     * @type {Date}
     * @memberof WalkinGuest
     */
    created?: Date;
    /**
     *
     * @type {Date}
     * @memberof WalkinGuest
     */
    closed?: Date;
    /**
     *
     * @type {Date}
     * @memberof WalkinGuest
     */
    expectedTime?: Date;
    /**
     *
     * @type {number}
     * @memberof WalkinGuest
     */
    groupSize?: number;
    /**
     *
     * @type {Array<Waiter>}
     * @memberof WalkinGuest
     */
    waiters?: Array<Waiter>;
    /**
     *
     * @type {ProfileData}
     * @memberof WalkinGuest
     */
    customerProfile?: ProfileData;
    /**
     *
     * @type {Additionals}
     * @memberof WalkinGuest
     */
    additionals?: Additionals;
    /**
     *
     * @type {number}
     * @memberof WalkinGuest
     */
    estimatedTurnOverTime?: number;
    /**
     *
     * @type {string}
     * @memberof WalkinGuest
     */
    estimatedTurnOver?: string;
}

/**
 *
 * @export
 * @interface WeekDayOpenHours
 */
export interface WeekDayOpenHours {
    /**
     *
     * @type {Array<HourlyInterval>}
     * @memberof WeekDayOpenHours
     */
    time?: Array<HourlyInterval>;
    /**
     *
     * @type {number}
     * @memberof WeekDayOpenHours
     */
    weekDay?: number;
}

/**
 *
 * @export
 * @interface Zone
 */
export interface Zone {
    /**
     *
     * @type {number}
     * @memberof Zone
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof Zone
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof Zone
     */
    color?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof Zone
     */
    tableNumbers?: Array<string>;
    /**
     *
     * @type {Array<Waiter>}
     * @memberof Zone
     */
    waiters?: Array<Waiter>;
}


// /**
//  * MobileCoreApi - fetch parameter creator
//  * @export
//  */
// export const MobileCoreApiFetchParamCreator = function (
//     configuration?: Configuration
// ) {
//     return {
//         /**
//          *
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         assignBookings(options: any = {}): FetchArgs {
//             const localVarPath = `/api/core/mb/bookings/assign`;
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: "POST" }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             // authentication oauth2 required
//             // oauth required
//             if (configuration && configuration.accessToken) {
//                 const localVarAccessTokenValue =
//                     typeof configuration.accessToken === "function"
//                         ? configuration.accessToken("oauth2", ["any user"])
//                         : configuration.accessToken;
//                 localVarHeaderParameter["Authorization"] =
//                     "Bearer " + localVarAccessTokenValue;
//             }

//             localVarUrlObj.query = Object.assign(
//                 {},
//                 localVarUrlObj.query,
//                 localVarQueryParameter,
//                 options.query
//             );
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign(
//                 {},
//                 localVarHeaderParameter,
//                 options.headers
//             );

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions
//             };
//         },
//         /**
//          *
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         getAllRestaurants(options: any = {}): FetchArgs {
//             const localVarPath = `/api/core/mb/restaurants`;
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: "GET" }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             localVarUrlObj.query = Object.assign(
//                 {},
//                 localVarUrlObj.query,
//                 localVarQueryParameter,
//                 options.query
//             );
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign(
//                 {},
//                 localVarHeaderParameter,
//                 options.headers
//             );

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions
//             };
//         },
//         /**
//          *
//          * @param {number} restaurantId
//          * @param {Date} [contractDate]
//          * @param {number} [contractPartySize]
//          * @param {number} [contractRangeInMinutes]
//          * @param {string} [contractAreas]
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         getMobileReservationAvailability(
//             restaurantId: number,
//             contractDate?: Date,
//             contractPartySize?: number,
//             contractRangeInMinutes?: number,
//             contractAreas?: string,
//             options: any = {}
//         ): FetchArgs {
//             // verify required parameter 'restaurantId' is not null or undefined
//             if (restaurantId === null || restaurantId === undefined) {
//                 throw new RequiredError(
//                     "restaurantId",
//                     "Required parameter restaurantId was null or undefined when calling getMobileReservationAvailability."
//                 );
//             }
//             const localVarPath = `/api/core/mb/restaurants/{restaurantId}/availability`.replace(
//                 `{${"restaurantId"}}`,
//                 encodeURIComponent(String(restaurantId))
//             );
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: "GET" }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             if (contractDate !== undefined) {
//                 localVarQueryParameter["contract.date"] = contractDate as any;
//             }

//             if (contractPartySize !== undefined) {
//                 localVarQueryParameter["contract.partySize"] = contractPartySize;
//             }

//             if (contractRangeInMinutes !== undefined) {
//                 localVarQueryParameter[
//                     "contract.rangeInMinutes"
//                 ] = contractRangeInMinutes;
//             }

//             if (contractAreas !== undefined) {
//                 localVarQueryParameter["contract.areas"] = contractAreas;
//             }

//             localVarUrlObj.query = Object.assign(
//                 {},
//                 localVarUrlObj.query,
//                 localVarQueryParameter,
//                 options.query
//             );
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign(
//                 {},
//                 localVarHeaderParameter,
//                 options.headers
//             );

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions
//             };
//         },
//         /**
//          *
//          * @param {number} restaurantId
//          * @param {boolean} [contractWithNextSlot]
//          * @param {Date} [contractTime]
//          * @param {number} [contractTableTurnOver]
//          * @param {string} [contractExcludeId]
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         getMobileReservationMonitors(
//             restaurantId: number,
//             contractWithNextSlot?: boolean,
//             contractTime?: Date,
//             contractTableTurnOver?: number,
//             contractExcludeId?: string,
//             options: any = {}
//         ): FetchArgs {
//             // verify required parameter 'restaurantId' is not null or undefined
//             if (restaurantId === null || restaurantId === undefined) {
//                 throw new RequiredError(
//                     "restaurantId",
//                     "Required parameter restaurantId was null or undefined when calling getMobileReservationMonitors."
//                 );
//             }
//             const localVarPath = `/api/core/mb/restaurants/{restaurantId}/monitors`.replace(
//                 `{${"restaurantId"}}`,
//                 encodeURIComponent(String(restaurantId))
//             );
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: "GET" }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             if (contractWithNextSlot !== undefined) {
//                 localVarQueryParameter["contract.withNextSlot"] = contractWithNextSlot;
//             }

//             if (contractTime !== undefined) {
//                 localVarQueryParameter[
//                     "contract.time"
//                 ] = (contractTime as any).toISOString();
//             }

//             if (contractTableTurnOver !== undefined) {
//                 localVarQueryParameter[
//                     "contract.tableTurnOver"
//                 ] = contractTableTurnOver;
//             }

//             if (contractExcludeId !== undefined) {
//                 localVarQueryParameter["contract.excludeId"] = contractExcludeId;
//             }

//             localVarUrlObj.query = Object.assign(
//                 {},
//                 localVarUrlObj.query,
//                 localVarQueryParameter,
//                 options.query
//             );
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign(
//                 {},
//                 localVarHeaderParameter,
//                 options.headers
//             );

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions
//             };
//         },
//         /**
//          *
//          * @param {number} id
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         getRestaurantById(id: number, options: any = {}): FetchArgs {
//             // verify required parameter 'id' is not null or undefined
//             if (id === null || id === undefined) {
//                 throw new RequiredError(
//                     "id",
//                     "Required parameter id was null or undefined when calling getRestaurantById."
//                 );
//             }
//             const localVarPath = `/api/core/mb/restaurants/{id}`.replace(
//                 `{${"id"}}`,
//                 encodeURIComponent(String(id))
//             );
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: "GET" }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             localVarUrlObj.query = Object.assign(
//                 {},
//                 localVarUrlObj.query,
//                 localVarQueryParameter,
//                 options.query
//             );
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign(
//                 {},
//                 localVarHeaderParameter,
//                 options.headers
//             );

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions
//             };
//         },
//         /**
//          *
//          * @param {number} restaurantId
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         getRestaurantProductGroups(
//             restaurantId: number,
//             options: any = {}
//         ): FetchArgs {
//             // verify required parameter 'restaurantId' is not null or undefined
//             if (restaurantId === null || restaurantId === undefined) {
//                 throw new RequiredError(
//                     "restaurantId",
//                     "Required parameter restaurantId was null or undefined when calling getRestaurantProductGroups."
//                 );
//             }
//             const localVarPath = `/api/core/mb/restaurants/{restaurantId}/menu`.replace(
//                 `{${"restaurantId"}}`,
//                 encodeURIComponent(String(restaurantId))
//             );
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: "GET" }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             localVarUrlObj.query = Object.assign(
//                 {},
//                 localVarUrlObj.query,
//                 localVarQueryParameter,
//                 options.query
//             );
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign(
//                 {},
//                 localVarHeaderParameter,
//                 options.headers
//             );

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions
//             };
//         },
//         /**
//          *
//          * @param {number} restaurantId
//          * @param {string} menuId
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         getRestaurantProductGroups_1(
//             restaurantId: number,
//             menuId: string,
//             options: any = {}
//         ): FetchArgs {
//             // verify required parameter 'restaurantId' is not null or undefined
//             if (restaurantId === null || restaurantId === undefined) {
//                 throw new RequiredError(
//                     "restaurantId",
//                     "Required parameter restaurantId was null or undefined when calling getRestaurantProductGroups_1."
//                 );
//             }
//             // verify required parameter 'menuId' is not null or undefined
//             if (menuId === null || menuId === undefined) {
//                 throw new RequiredError(
//                     "menuId",
//                     "Required parameter menuId was null or undefined when calling getRestaurantProductGroups_1."
//                 );
//             }
//             const localVarPath = `/api/core/mb/restaurants/{restaurantId}/menu/{menuId}`
//                 .replace(
//                     `{${"restaurantId"}}`,
//                     encodeURIComponent(String(restaurantId))
//                 )
//                 .replace(`{${"menuId"}}`, encodeURIComponent(String(menuId)));
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: "GET" }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             localVarUrlObj.query = Object.assign(
//                 {},
//                 localVarUrlObj.query,
//                 localVarQueryParameter,
//                 options.query
//             );
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign(
//                 {},
//                 localVarHeaderParameter,
//                 options.headers
//             );

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions
//             };
//         },
//         /**
//          *
//          * @param {number} id
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         getRestaurantPublicProfile(id: number, options: any = {}): FetchArgs {
//             // verify required parameter 'id' is not null or undefined
//             if (id === null || id === undefined) {
//                 throw new RequiredError(
//                     "id",
//                     "Required parameter id was null or undefined when calling getRestaurantPublicProfile."
//                 );
//             }
//             const localVarPath = `/api/core/mb/restaurants/{id}/profile`.replace(
//                 `{${"id"}}`,
//                 encodeURIComponent(String(id))
//             );
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: "GET" }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             localVarUrlObj.query = Object.assign(
//                 {},
//                 localVarUrlObj.query,
//                 localVarQueryParameter,
//                 options.query
//             );
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign(
//                 {},
//                 localVarHeaderParameter,
//                 options.headers
//             );

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions
//             };
//         },
//         /**
//          *
//          * @param {number} restaurantId
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         setupIntent(restaurantId: number, options: any = {}): FetchArgs {
//             // verify required parameter 'restaurantId' is not null or undefined
//             if (restaurantId === null || restaurantId === undefined) {
//                 throw new RequiredError(
//                     "restaurantId",
//                     "Required parameter restaurantId was null or undefined when calling setupIntent."
//                 );
//             }
//             const localVarPath = `/api/core/mb/restaurants/{restaurantId}/intents`.replace(
//                 `{${"restaurantId"}}`,
//                 encodeURIComponent(String(restaurantId))
//             );
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: "POST" }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             localVarUrlObj.query = Object.assign(
//                 {},
//                 localVarUrlObj.query,
//                 localVarQueryParameter,
//                 options.query
//             );
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign(
//                 {},
//                 localVarHeaderParameter,
//                 options.headers
//             );

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions
//             };
//         }
//     };
// };

// /**
//  * MobileCoreApi - functional programming interface
//  * @export
//  */
// export const MobileCoreApiFp = function (configuration?: Configuration) {
//     return {
//         /**
//          *
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         assignBookings(
//             options?: any
//         ): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
//             const localVarFetchArgs = MobileCoreApiFetchParamCreator(
//                 configuration
//             ).assignBookings(options);
//             return (
//                 fetch: FetchAPI = portableFetch,
//                 basePath: string = BASE_PATH
//             ) => {
//                 return fetch(
//                     basePath + localVarFetchArgs.url,
//                     localVarFetchArgs.options
//                 ).then(response => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response.json();
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          *
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         getAllRestaurants(
//             options?: any
//         ): (fetch?: FetchAPI, basePath?: string) => Promise<Array<RestaurantInfo>> {
//             const localVarFetchArgs = MobileCoreApiFetchParamCreator(
//                 configuration
//             ).getAllRestaurants(options);
//             return (
//                 fetch: FetchAPI = portableFetch,
//                 basePath: string = BASE_PATH
//             ) => {
//                 return fetch(
//                     basePath + localVarFetchArgs.url,
//                     localVarFetchArgs.options
//                 ).then(response => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response.json();
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          *
//          * @param {number} restaurantId
//          * @param {Date} [contractDate]
//          * @param {number} [contractPartySize]
//          * @param {number} [contractRangeInMinutes]
//          * @param {string} [contractAreas]
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         getMobileReservationAvailability(
//             restaurantId: number,
//             contractDate?: Date,
//             contractPartySize?: number,
//             contractRangeInMinutes?: number,
//             contractAreas?: string,
//             options?: any
//         ): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
//             const localVarFetchArgs = MobileCoreApiFetchParamCreator(
//                 configuration
//             ).getMobileReservationAvailability(
//                 restaurantId,
//                 contractDate,
//                 contractPartySize,
//                 contractRangeInMinutes,
//                 contractAreas,
//                 options
//             );
//             return (
//                 fetch: FetchAPI = portableFetch,
//                 basePath: string = BASE_PATH
//             ) => {
//                 return fetch(
//                     basePath + localVarFetchArgs.url,
//                     localVarFetchArgs.options
//                 ).then(response => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response.json();
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          *
//          * @param {number} restaurantId
//          * @param {boolean} [contractWithNextSlot]
//          * @param {Date} [contractTime]
//          * @param {number} [contractTableTurnOver]
//          * @param {string} [contractExcludeId]
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         getMobileReservationMonitors(
//             restaurantId: number,
//             contractWithNextSlot?: boolean,
//             contractTime?: Date,
//             contractTableTurnOver?: number,
//             contractExcludeId?: string,
//             options?: any
//         ): (fetch?: FetchAPI, basePath?: string) => Promise<RestaurantState> {
//             const localVarFetchArgs = MobileCoreApiFetchParamCreator(
//                 configuration
//             ).getMobileReservationMonitors(
//                 restaurantId,
//                 contractWithNextSlot,
//                 contractTime,
//                 contractTableTurnOver,
//                 contractExcludeId,
//                 options
//             );
//             return (
//                 fetch: FetchAPI = portableFetch,
//                 basePath: string = BASE_PATH
//             ) => {
//                 return fetch(
//                     basePath + localVarFetchArgs.url,
//                     localVarFetchArgs.options
//                 ).then(response => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response.json();
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          *
//          * @param {number} id
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         getRestaurantById(
//             id: number,
//             options?: any
//         ): (fetch?: FetchAPI, basePath?: string) => Promise<RestaurantInfo> {
//             const localVarFetchArgs = MobileCoreApiFetchParamCreator(
//                 configuration
//             ).getRestaurantById(id, options);
//             return (
//                 fetch: FetchAPI = portableFetch,
//                 basePath: string = BASE_PATH
//             ) => {
//                 return fetch(
//                     basePath + localVarFetchArgs.url,
//                     localVarFetchArgs.options
//                 ).then(response => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response.json();
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          *
//          * @param {number} restaurantId
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         getRestaurantProductGroups(
//             restaurantId: number,
//             options?: any
//         ): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
//             const localVarFetchArgs = MobileCoreApiFetchParamCreator(
//                 configuration
//             ).getRestaurantProductGroups(restaurantId, options);
//             return (
//                 fetch: FetchAPI = portableFetch,
//                 basePath: string = BASE_PATH
//             ) => {
//                 return fetch(
//                     basePath + localVarFetchArgs.url,
//                     localVarFetchArgs.options
//                 ).then(response => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response.json();
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          *
//          * @param {number} restaurantId
//          * @param {string} menuId
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         getRestaurantProductGroups_1(
//             restaurantId: number,
//             menuId: string,
//             options?: any
//         ): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
//             const localVarFetchArgs = MobileCoreApiFetchParamCreator(
//                 configuration
//             ).getRestaurantProductGroups_1(restaurantId, menuId, options);
//             return (
//                 fetch: FetchAPI = portableFetch,
//                 basePath: string = BASE_PATH
//             ) => {
//                 return fetch(
//                     basePath + localVarFetchArgs.url,
//                     localVarFetchArgs.options
//                 ).then(response => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response.json();
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          *
//          * @param {number} id
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         getRestaurantPublicProfile(
//             id: number,
//             options?: any
//         ): (
//                 fetch?: FetchAPI,
//                 basePath?: string
//             ) => Promise<RestaurantPublicProfile> {
//             const localVarFetchArgs = MobileCoreApiFetchParamCreator(
//                 configuration
//             ).getRestaurantPublicProfile(id, options);
//             return (
//                 fetch: FetchAPI = portableFetch,
//                 basePath: string = BASE_PATH
//             ) => {
//                 return fetch(
//                     basePath + localVarFetchArgs.url,
//                     localVarFetchArgs.options
//                 ).then(response => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response.json();
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          *
//          * @param {number} restaurantId
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         setupIntent(
//             restaurantId: number,
//             options?: any
//         ): (fetch?: FetchAPI, basePath?: string) => Promise<IntentSecret> {
//             const localVarFetchArgs = MobileCoreApiFetchParamCreator(
//                 configuration
//             ).setupIntent(restaurantId, options);
//             return (
//                 fetch: FetchAPI = portableFetch,
//                 basePath: string = BASE_PATH
//             ) => {
//                 return fetch(
//                     basePath + localVarFetchArgs.url,
//                     localVarFetchArgs.options
//                 ).then(response => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response.json();
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         }
//     };
// };

// /**
//  * MobileCoreApi - factory interface
//  * @export
//  */
// export const MobileCoreApiFactory = function (
//     configuration?: Configuration,
//     fetch?: FetchAPI,
//     basePath?: string
// ) {
//     return {
//         /**
//          *
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         assignBookings(options?: any) {
//             return MobileCoreApiFp(configuration).assignBookings(options)(
//                 fetch,
//                 basePath
//             );
//         },
//         /**
//          *
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         getAllRestaurants(options?: any) {
//             return MobileCoreApiFp(configuration).getAllRestaurants(options)(
//                 fetch,
//                 basePath
//             );
//         },
//         /**
//          *
//          * @param {number} restaurantId
//          * @param {Date} [contractDate]
//          * @param {number} [contractPartySize]
//          * @param {number} [contractRangeInMinutes]
//          * @param {string} [contractAreas]
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         getMobileReservationAvailability(
//             restaurantId: number,
//             contractDate?: any,
//             contractPartySize?: number,
//             contractRangeInMinutes?: number,
//             contractAreas?: string,
//             options?: any
//         ) {
//             return MobileCoreApiFp(configuration).getMobileReservationAvailability(
//                 restaurantId,
//                 contractDate,
//                 contractPartySize,
//                 contractRangeInMinutes,
//                 contractAreas,
//                 options
//             )(fetch, basePath);
//         },
//         /**
//          *
//          * @param {number} restaurantId
//          * @param {boolean} [contractWithNextSlot]
//          * @param {Date} [contractTime]
//          * @param {number} [contractTableTurnOver]
//          * @param {string} [contractExcludeId]
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         getMobileReservationMonitors(
//             restaurantId: number,
//             contractWithNextSlot?: boolean,
//             contractTime?: Date,
//             contractTableTurnOver?: number,
//             contractExcludeId?: string,
//             options?: any
//         ) {
//             return MobileCoreApiFp(configuration).getMobileReservationMonitors(
//                 restaurantId,
//                 contractWithNextSlot,
//                 contractTime,
//                 contractTableTurnOver,
//                 contractExcludeId,
//                 options
//             )(fetch, basePath);
//         },
//         /**
//          *
//          * @param {number} id
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         getRestaurantById(id: number, options?: any) {
//             return MobileCoreApiFp(configuration).getRestaurantById(id, options)(
//                 fetch,
//                 basePath
//             );
//         },
//         /**
//          *
//          * @param {number} restaurantId
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         getRestaurantProductGroups(restaurantId: number, options?: any) {
//             return MobileCoreApiFp(configuration).getRestaurantProductGroups(
//                 restaurantId,
//                 options
//             )(fetch, basePath);
//         },
//         /**
//          *
//          * @param {number} restaurantId
//          * @param {string} menuId
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         getRestaurantProductGroups_1(
//             restaurantId: number,
//             menuId: string,
//             options?: any
//         ) {
//             return MobileCoreApiFp(configuration).getRestaurantProductGroups_1(
//                 restaurantId,
//                 menuId,
//                 options
//             )(fetch, basePath);
//         },
//         /**
//          *
//          * @param {number} id
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         getRestaurantPublicProfile(id: number, options?: any) {
//             return MobileCoreApiFp(configuration).getRestaurantPublicProfile(
//                 id,
//                 options
//             )(fetch, basePath);
//         },
//         /**
//          *
//          * @param {number} restaurantId
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         setupIntent(restaurantId: number, options?: any) {
//             return MobileCoreApiFp(configuration).setupIntent(restaurantId, options)(
//                 fetch,
//                 basePath
//             );
//         }
//     };
// };

// /**
//  * MobileCoreApi - object-oriented interface
//  * @export
//  * @class MobileCoreApi
//  * @extends {BaseAPI}
//  */
// export class MobileCoreApi extends BaseAPI {
//     /**
//      *
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof MobileCoreApi
//      */
//     public assignBookings(options?: any) {
//         return MobileCoreApiFp(this.configuration).assignBookings(options)(
//             this.fetch,
//             this.basePath
//         );
//     }

//     /**
//      *
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof MobileCoreApi
//      */
//     public getAllRestaurants(options?: any) {
//         return MobileCoreApiFp(this.configuration).getAllRestaurants(options)(
//             this.fetch,
//             this.basePath
//         );
//     }

//     /**
//      *
//      * @param {number} restaurantId
//      * @param {Date} [contractDate]
//      * @param {number} [contractPartySize]
//      * @param {number} [contractRangeInMinutes]
//      * @param {string} [contractAreas]
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof MobileCoreApi
//      */
//     public getMobileReservationAvailability(
//         restaurantId: number,
//         contractDate?: Date,
//         contractPartySize?: number,
//         contractRangeInMinutes?: number,
//         contractAreas?: string,
//         options?: any
//     ) {
//         return MobileCoreApiFp(this.configuration).getMobileReservationAvailability(
//             restaurantId,
//             contractDate,
//             contractPartySize,
//             contractRangeInMinutes,
//             contractAreas,
//             options
//         )(this.fetch, this.basePath);
//     }

//     /**
//      *
//      * @param {number} restaurantId
//      * @param {boolean} [contractWithNextSlot]
//      * @param {Date} [contractTime]
//      * @param {number} [contractTableTurnOver]
//      * @param {string} [contractExcludeId]
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof MobileCoreApi
//      */
//     public getMobileReservationMonitors(
//         restaurantId: number,
//         contractWithNextSlot?: boolean,
//         contractTime?: Date,
//         contractTableTurnOver?: number,
//         contractExcludeId?: string,
//         options?: any
//     ) {
//         return MobileCoreApiFp(this.configuration).getMobileReservationMonitors(
//             restaurantId,
//             contractWithNextSlot,
//             contractTime,
//             contractTableTurnOver,
//             contractExcludeId,
//             options
//         )(this.fetch, this.basePath);
//     }

//     /**
//      *
//      * @param {number} id
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof MobileCoreApi
//      */
//     public getRestaurantById(id: number, options?: any) {
//         return MobileCoreApiFp(this.configuration).getRestaurantById(id, options)(
//             this.fetch,
//             this.basePath
//         );
//     }

//     /**
//      *
//      * @param {number} restaurantId
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof MobileCoreApi
//      */
//     public getRestaurantProductGroups(restaurantId: number, options?: any) {
//         return MobileCoreApiFp(this.configuration).getRestaurantProductGroups(
//             restaurantId,
//             options
//         )(this.fetch, this.basePath);
//     }

//     /**
//      *
//      * @param {number} restaurantId
//      * @param {string} menuId
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof MobileCoreApi
//      */
//     public getRestaurantProductGroups_1(
//         restaurantId: number,
//         menuId: string,
//         options?: any
//     ) {
//         return MobileCoreApiFp(this.configuration).getRestaurantProductGroups_1(
//             restaurantId,
//             menuId,
//             options
//         )(this.fetch, this.basePath);
//     }

//     /**
//      *
//      * @param {number} id
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof MobileCoreApi
//      */
//     public getRestaurantPublicProfile(id: number, options?: any) {
//         return MobileCoreApiFp(this.configuration).getRestaurantPublicProfile(
//             id,
//             options
//         )(this.fetch, this.basePath);
//     }

//     /**
//      *
//      * @param {number} restaurantId
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof MobileCoreApi
//      */
//     public setupIntent(restaurantId: number, options?: any) {
//         return MobileCoreApiFp(this.configuration).setupIntent(
//             restaurantId,
//             options
//         )(this.fetch, this.basePath);
//     }
// }

// /**
//  * MobileReservationsApi - fetch parameter creator
//  * @export
//  */
// export const MobileReservationsApiFetchParamCreator = function (
//     configuration?: Configuration
// ) {
//     return {
//         /**
//          *
//          * @param {string} walkinId
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         cancel(walkinId: string, options: any = {}): FetchArgs {
//             // verify required parameter 'walkinId' is not null or undefined
//             if (walkinId === null || walkinId === undefined) {
//                 throw new RequiredError(
//                     "walkinId",
//                     "Required parameter walkinId was null or undefined when calling cancel."
//                 );
//             }
//             const localVarPath = `/api/rsv/mb/guest/walkins/{walkinId}`.replace(
//                 `{${"walkinId"}}`,
//                 encodeURIComponent(String(walkinId))
//             );
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign(
//                 { method: "DELETE" },
//                 options
//             );
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             localVarUrlObj.query = Object.assign(
//                 {},
//                 localVarUrlObj.query,
//                 localVarQueryParameter,
//                 options.query
//             );
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign(
//                 {},
//                 localVarHeaderParameter,
//                 options.headers
//             );

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions
//             };
//         },
//         /**
//          *
//          * @param {CreateMobileWalkin} contract
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         create(contract: any, options: any = {}): FetchArgs {
//             // verify required parameter 'contract' is not null or undefined
//             if (contract === null || contract === undefined) {
//                 throw new RequiredError(
//                     "contract",
//                     "Required parameter contract was null or undefined when calling create."
//                 );
//             }
//             const localVarPath = `/api/rsv/mb/guest/walkins`;
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: "POST" }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             localVarHeaderParameter["Content-Type"] = "application/json";

//             localVarUrlObj.query = Object.assign(
//                 {},
//                 localVarUrlObj.query,
//                 localVarQueryParameter,
//                 options.query
//             );
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign(
//                 {},
//                 localVarHeaderParameter,
//                 options.headers
//             );
//             const needsSerialization =
//                 <any>"CreateMobileWalkin" !== "string" ||
//                 localVarRequestOptions.headers["Content-Type"] === "application/json";
//             localVarRequestOptions.body = needsSerialization
//                 ? JSON.stringify(contract || {})
//                 : contract || "";

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions
//             };
//         },
//         /**
//          *
//          * @param {string} walkinId
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         get(walkinId: string, options: any = {}): FetchArgs {
//             // verify required parameter 'walkinId' is not null or undefined
//             if (walkinId === null || walkinId === undefined) {
//                 throw new RequiredError(
//                     "walkinId",
//                     "Required parameter walkinId was null or undefined when calling get."
//                 );
//             }
//             const localVarPath = `/api/rsv/mb/guest/walkins/{walkinId}`.replace(
//                 `{${"walkinId"}}`,
//                 encodeURIComponent(String(walkinId))
//             );
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: "GET" }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             localVarUrlObj.query = Object.assign(
//                 {},
//                 localVarUrlObj.query,
//                 localVarQueryParameter,
//                 options.query
//             );
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign(
//                 {},
//                 localVarHeaderParameter,
//                 options.headers
//             );

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions
//             };
//         },
//         /**
//          *
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         getData(options: any = {}): FetchArgs {
//             const localVarPath = `/api/rsv/mb/guest/walkins/data`;
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: "GET" }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             localVarUrlObj.query = Object.assign(
//                 {},
//                 localVarUrlObj.query,
//                 localVarQueryParameter,
//                 options.query
//             );
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign(
//                 {},
//                 localVarHeaderParameter,
//                 options.headers
//             );

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions
//             };
//         },
//         /**
//          *
//          * @param {number} restaurantId
//          * @param {string} partySizes
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         getExpectedTime(
//             restaurantId: number,
//             partySizes: string,
//             options: any = {}
//         ): FetchArgs {
//             // verify required parameter 'restaurantId' is not null or undefined
//             if (restaurantId === null || restaurantId === undefined) {
//                 throw new RequiredError(
//                     "restaurantId",
//                     "Required parameter restaurantId was null or undefined when calling getExpectedTime."
//                 );
//             }
//             // verify required parameter 'partySizes' is not null or undefined
//             if (partySizes === null || partySizes === undefined) {
//                 throw new RequiredError(
//                     "partySizes",
//                     "Required parameter partySizes was null or undefined when calling getExpectedTime."
//                 );
//             }
//             const localVarPath = `/api/rsv/mb/guest/restaurants/{restaurantId}/walkins/expected`.replace(
//                 `{${"restaurantId"}}`,
//                 encodeURIComponent(String(restaurantId))
//             );
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: "GET" }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             if (partySizes !== undefined) {
//                 localVarQueryParameter["partySizes"] = partySizes;
//             }

//             localVarUrlObj.query = Object.assign(
//                 {},
//                 localVarUrlObj.query,
//                 localVarQueryParameter,
//                 options.query
//             );
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign(
//                 {},
//                 localVarHeaderParameter,
//                 options.headers
//             );

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions
//             };
//         },
//         /**
//          *
//          * @param {number} [skip]
//          * @param {number} [top]
//          * @param {Date} [from]
//          * @param {Date} [to]
//          * @param {string} [statuses]
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         getGuestReservations(
//             skip?: number,
//             top?: number,
//             from?: Date,
//             to?: Date,
//             statuses?: string,
//             options: any = {}
//         ): FetchArgs {
//             const localVarPath = `/api/rsv/mb/guest/reservations`;
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: "GET" }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             // authentication oauth2 required
//             // oauth required
//             if (configuration && configuration.accessToken) {
//                 const localVarAccessTokenValue =
//                     typeof configuration.accessToken === "function"
//                         ? configuration.accessToken("oauth2", ["any user"])
//                         : configuration.accessToken;
//                 localVarHeaderParameter["Authorization"] =
//                     "Bearer " + localVarAccessTokenValue;
//             }

//             if (skip !== undefined) {
//                 localVarQueryParameter["skip"] = skip;
//             }

//             if (top !== undefined) {
//                 localVarQueryParameter["top"] = top;
//             }

//             if (from !== undefined) {
//                 localVarQueryParameter["from"] = (from as any).toISOString();
//             }

//             if (to !== undefined) {
//                 localVarQueryParameter["to"] = (to as any).toISOString();
//             }

//             if (statuses !== undefined) {
//                 localVarQueryParameter["statuses"] = statuses;
//             }

//             localVarUrlObj.query = Object.assign(
//                 {},
//                 localVarUrlObj.query,
//                 localVarQueryParameter,
//                 options.query
//             );
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign(
//                 {},
//                 localVarHeaderParameter,
//                 options.headers
//             );

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions
//             };
//         },
//         /**
//          *
//          * @param {number} [skip]
//          * @param {number} [top]
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         getGuestReservationsHistory(
//             skip?: number,
//             top?: number,
//             options: any = {}
//         ): FetchArgs {
//             const localVarPath = `/api/rsv/mb/guest/reservations/history`;
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: "GET" }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             // authentication oauth2 required
//             // oauth required
//             if (configuration && configuration.accessToken) {
//                 const localVarAccessTokenValue =
//                     typeof configuration.accessToken === "function"
//                         ? configuration.accessToken("oauth2", ["any user"])
//                         : configuration.accessToken;
//                 localVarHeaderParameter["Authorization"] =
//                     "Bearer " + localVarAccessTokenValue;
//             }

//             if (skip !== undefined) {
//                 localVarQueryParameter["skip"] = skip;
//             }

//             if (top !== undefined) {
//                 localVarQueryParameter["top"] = top;
//             }

//             localVarUrlObj.query = Object.assign(
//                 {},
//                 localVarUrlObj.query,
//                 localVarQueryParameter,
//                 options.query
//             );
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign(
//                 {},
//                 localVarHeaderParameter,
//                 options.headers
//             );

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions
//             };
//         },
//         /**
//          *
//          * @param {number} [skip]
//          * @param {number} [top]
//          * @param {Date} [from]
//          * @param {Date} [to]
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         getGuestWalkinsHistory(
//             skip?: number,
//             top?: number,
//             from?: Date,
//             to?: Date,
//             options: any = {}
//         ): FetchArgs {
//             const localVarPath = `/api/rsv/mb/guest/walkins`;
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: "GET" }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             // authentication oauth2 required
//             // oauth required
//             if (configuration && configuration.accessToken) {
//                 const localVarAccessTokenValue =
//                     typeof configuration.accessToken === "function"
//                         ? configuration.accessToken("oauth2", ["any user"])
//                         : configuration.accessToken;
//                 localVarHeaderParameter["Authorization"] =
//                     "Bearer " + localVarAccessTokenValue;
//             }

//             if (skip !== undefined) {
//                 localVarQueryParameter["skip"] = skip;
//             }

//             if (top !== undefined) {
//                 localVarQueryParameter["top"] = top;
//             }

//             if (from !== undefined) {
//                 localVarQueryParameter["from"] = (from as any).toISOString();
//             }

//             if (to !== undefined) {
//                 localVarQueryParameter["to"] = (to as any).toISOString();
//             }

//             localVarUrlObj.query = Object.assign(
//                 {},
//                 localVarUrlObj.query,
//                 localVarQueryParameter,
//                 options.query
//             );
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign(
//                 {},
//                 localVarHeaderParameter,
//                 options.headers
//             );

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions
//             };
//         },
//         /**
//          *
//          * @param {CreateMobileReservation} contract
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         guestAddNewReservation(
//             contract: CreateMobileReservation,
//             options: any = {}
//         ): FetchArgs {
//             // verify required parameter 'contract' is not null or undefined
//             if (contract === null || contract === undefined) {
//                 throw new RequiredError(
//                     "contract",
//                     "Required parameter contract was null or undefined when calling guestAddNewReservation."
//                 );
//             }
//             const localVarPath = `/api/rsv/mb/guest/reservations`;
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: "POST" }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             localVarHeaderParameter["Content-Type"] = "application/json";

//             localVarUrlObj.query = Object.assign(
//                 {},
//                 localVarUrlObj.query,
//                 localVarQueryParameter,
//                 options.query
//             );
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign(
//                 {},
//                 localVarHeaderParameter,
//                 options.headers
//             );
//             const needsSerialization =
//                 <any>"CreateMobileReservation" !== "string" ||
//                 localVarRequestOptions.headers["Content-Type"] === "application/json";
//             localVarRequestOptions.body = needsSerialization
//                 ? JSON.stringify(contract || {})
//                 : contract || "";

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions
//             };
//         },
//         /**
//          *
//          * @param {string} reservationId
//          * @param {CancelReservation} cancelReservationContract
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         guestCloseAsCanceled(
//             reservationId: string,
//             cancelReservationContract: CancelReservation,
//             options: any = {}
//         ): FetchArgs {
//             // verify required parameter 'reservationId' is not null or undefined
//             if (reservationId === null || reservationId === undefined) {
//                 throw new RequiredError(
//                     "reservationId",
//                     "Required parameter reservationId was null or undefined when calling guestCloseAsCanceled."
//                 );
//             }
//             // verify required parameter 'cancelReservationContract' is not null or undefined
//             if (
//                 cancelReservationContract === null ||
//                 cancelReservationContract === undefined
//             ) {
//                 throw new RequiredError(
//                     "cancelReservationContract",
//                     "Required parameter cancelReservationContract was null or undefined when calling guestCloseAsCanceled."
//                 );
//             }
//             const localVarPath = `/api/rsv/mb/guest/reservations/{reservationId}/cancel`.replace(
//                 `{${"reservationId"}}`,
//                 encodeURIComponent(String(reservationId))
//             );
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             // authentication oauth2 required
//             // oauth required
//             if (configuration && configuration.accessToken) {
//                 const localVarAccessTokenValue =
//                     typeof configuration.accessToken === "function"
//                         ? configuration.accessToken("oauth2", ["any user"])
//                         : configuration.accessToken;
//                 localVarHeaderParameter["Authorization"] =
//                     "Bearer " + localVarAccessTokenValue;
//             }

//             localVarHeaderParameter["Content-Type"] = "application/json";

//             localVarUrlObj.query = Object.assign(
//                 {},
//                 localVarUrlObj.query,
//                 localVarQueryParameter,
//                 options.query
//             );
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign(
//                 {},
//                 localVarHeaderParameter,
//                 options.headers
//             );
//             const needsSerialization =
//                 <any>"CancelReservation" !== "string" ||
//                 localVarRequestOptions.headers["Content-Type"] === "application/json";
//             localVarRequestOptions.body = needsSerialization
//                 ? JSON.stringify(cancelReservationContract || {})
//                 : cancelReservationContract || "";

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions
//             };
//         },
//         /**
//          *
//          * @param {string} code
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         guestGetInvitation(code: string, options: any = {}): FetchArgs {
//             // verify required parameter 'code' is not null or undefined
//             if (code === null || code === undefined) {
//                 throw new RequiredError(
//                     "code",
//                     "Required parameter code was null or undefined when calling guestGetInvitation."
//                 );
//             }
//             const localVarPath = `/api/rsv/mb/guest/reservations/invitations/{code}`.replace(
//                 `{${"code"}}`,
//                 encodeURIComponent(String(code))
//             );
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: "GET" }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             localVarUrlObj.query = Object.assign(
//                 {},
//                 localVarUrlObj.query,
//                 localVarQueryParameter,
//                 options.query
//             );
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign(
//                 {},
//                 localVarHeaderParameter,
//                 options.headers
//             );

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions
//             };
//         },
//         /**
//          *
//          * @param {string} reservationId
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         guestGetReservationById(
//             reservationId: string,
//             options: any = {}
//         ): FetchArgs {
//             // verify required parameter 'reservationId' is not null or undefined
//             if (reservationId === null || reservationId === undefined) {
//                 throw new RequiredError(
//                     "reservationId",
//                     "Required parameter reservationId was null or undefined when calling guestGetReservationById."
//                 );
//             }
//             const localVarPath = `/api/rsv/mb/guest/reservations/{reservationId}`.replace(
//                 `{${"reservationId"}}`,
//                 encodeURIComponent(String(reservationId))
//             );
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: "GET" }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             // authentication oauth2 required
//             // oauth required
//             if (configuration && configuration.accessToken) {
//                 const localVarAccessTokenValue =
//                     typeof configuration.accessToken === "function"
//                         ? configuration.accessToken("oauth2", ["any user"])
//                         : configuration.accessToken;
//                 localVarHeaderParameter["Authorization"] =
//                     "Bearer " + localVarAccessTokenValue;
//             }

//             localVarUrlObj.query = Object.assign(
//                 {},
//                 localVarUrlObj.query,
//                 localVarQueryParameter,
//                 options.query
//             );
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign(
//                 {},
//                 localVarHeaderParameter,
//                 options.headers
//             );

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions
//             };
//         },
//         /**
//          *
//          * @param {string} reservationId
//          * @param {PartyMembersInvitation} invitationContract
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         guestInvitePartyMembers(
//             reservationId: string,
//             invitationContract: PartyMembersInvitation,
//             options: any = {}
//         ): FetchArgs {
//             // verify required parameter 'reservationId' is not null or undefined
//             if (reservationId === null || reservationId === undefined) {
//                 throw new RequiredError(
//                     "reservationId",
//                     "Required parameter reservationId was null or undefined when calling guestInvitePartyMembers."
//                 );
//             }
//             // verify required parameter 'invitationContract' is not null or undefined
//             if (invitationContract === null || invitationContract === undefined) {
//                 throw new RequiredError(
//                     "invitationContract",
//                     "Required parameter invitationContract was null or undefined when calling guestInvitePartyMembers."
//                 );
//             }
//             const localVarPath = `/api/rsv/mb/guest/reservations/{reservationId}/invitations`.replace(
//                 `{${"reservationId"}}`,
//                 encodeURIComponent(String(reservationId))
//             );
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: "POST" }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             // authentication oauth2 required
//             // oauth required
//             if (configuration && configuration.accessToken) {
//                 const localVarAccessTokenValue =
//                     typeof configuration.accessToken === "function"
//                         ? configuration.accessToken("oauth2", ["any user"])
//                         : configuration.accessToken;
//                 localVarHeaderParameter["Authorization"] =
//                     "Bearer " + localVarAccessTokenValue;
//             }

//             localVarHeaderParameter["Content-Type"] = "application/json";

//             localVarUrlObj.query = Object.assign(
//                 {},
//                 localVarUrlObj.query,
//                 localVarQueryParameter,
//                 options.query
//             );
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign(
//                 {},
//                 localVarHeaderParameter,
//                 options.headers
//             );
//             const needsSerialization =
//                 <any>"PartyMembersInvitation" !== "string" ||
//                 localVarRequestOptions.headers["Content-Type"] === "application/json";
//             localVarRequestOptions.body = needsSerialization
//                 ? JSON.stringify(invitationContract || {})
//                 : invitationContract || "";

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions
//             };
//         },
//         /**
//          *
//          * @param {RedeemReservationInvitation} redeemInvitationContract
//          * @param {string} code
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         guestRedeemInvitation(
//             redeemInvitationContract: RedeemReservationInvitation,
//             code: string,
//             options: any = {}
//         ): FetchArgs {
//             // verify required parameter 'redeemInvitationContract' is not null or undefined
//             if (
//                 redeemInvitationContract === null ||
//                 redeemInvitationContract === undefined
//             ) {
//                 throw new RequiredError(
//                     "redeemInvitationContract",
//                     "Required parameter redeemInvitationContract was null or undefined when calling guestRedeemInvitation."
//                 );
//             }
//             // verify required parameter 'code' is not null or undefined
//             if (code === null || code === undefined) {
//                 throw new RequiredError(
//                     "code",
//                     "Required parameter code was null or undefined when calling guestRedeemInvitation."
//                 );
//             }
//             const localVarPath = `/api/rsv/mb/guest/reservations/invitations/{code}`.replace(
//                 `{${"code"}}`,
//                 encodeURIComponent(String(code))
//             );
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: "POST" }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             localVarHeaderParameter["Content-Type"] = "application/json";

//             localVarUrlObj.query = Object.assign(
//                 {},
//                 localVarUrlObj.query,
//                 localVarQueryParameter,
//                 options.query
//             );
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign(
//                 {},
//                 localVarHeaderParameter,
//                 options.headers
//             );
//             const needsSerialization =
//                 <any>"RedeemReservationInvitation" !== "string" ||
//                 localVarRequestOptions.headers["Content-Type"] === "application/json";
//             localVarRequestOptions.body = needsSerialization
//                 ? JSON.stringify(redeemInvitationContract || {})
//                 : redeemInvitationContract || "";

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions
//             };
//         },
//         /**
//          *
//          * @param {string} reservationId
//          * @param {CreateMobileReservation} contract
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         guestUpdateReservation(
//             reservationId: string,
//             contract: CreateMobileReservation,
//             options: any = {}
//         ): FetchArgs {
//             // verify required parameter 'reservationId' is not null or undefined
//             if (reservationId === null || reservationId === undefined) {
//                 throw new RequiredError(
//                     "reservationId",
//                     "Required parameter reservationId was null or undefined when calling guestUpdateReservation."
//                 );
//             }
//             // verify required parameter 'contract' is not null or undefined
//             if (contract === null || contract === undefined) {
//                 throw new RequiredError(
//                     "contract",
//                     "Required parameter contract was null or undefined when calling guestUpdateReservation."
//                 );
//             }
//             const localVarPath = `/api/rsv/mb/guest/reservations/{reservationId}`.replace(
//                 `{${"reservationId"}}`,
//                 encodeURIComponent(String(reservationId))
//             );
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             // authentication oauth2 required
//             // oauth required
//             if (configuration && configuration.accessToken) {
//                 const localVarAccessTokenValue =
//                     typeof configuration.accessToken === "function"
//                         ? configuration.accessToken("oauth2", ["any user"])
//                         : configuration.accessToken;
//                 localVarHeaderParameter["Authorization"] =
//                     "Bearer " + localVarAccessTokenValue;
//             }

//             localVarHeaderParameter["Content-Type"] = "application/json";

//             localVarUrlObj.query = Object.assign(
//                 {},
//                 localVarUrlObj.query,
//                 localVarQueryParameter,
//                 options.query
//             );
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign(
//                 {},
//                 localVarHeaderParameter,
//                 options.headers
//             );
//             const needsSerialization =
//                 <any>"CreateMobileReservation" !== "string" ||
//                 localVarRequestOptions.headers["Content-Type"] === "application/json";
//             localVarRequestOptions.body = needsSerialization
//                 ? JSON.stringify(contract || {})
//                 : contract || "";

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions
//             };
//         },
//         /**
//          *
//          * @param {string} reservationId
//          * @param {SendFeedback} contract
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         sendFeedback(
//             reservationId: string,
//             contract: SendFeedback,
//             options: any = {}
//         ): FetchArgs {
//             // verify required parameter 'reservationId' is not null or undefined
//             if (reservationId === null || reservationId === undefined) {
//                 throw new RequiredError(
//                     "reservationId",
//                     "Required parameter reservationId was null or undefined when calling sendFeedback."
//                 );
//             }
//             // verify required parameter 'contract' is not null or undefined
//             if (contract === null || contract === undefined) {
//                 throw new RequiredError(
//                     "contract",
//                     "Required parameter contract was null or undefined when calling sendFeedback."
//                 );
//             }
//             const localVarPath = `/api/rsv/mb/guest/reservations/{reservationId}/feedback`.replace(
//                 `{${"reservationId"}}`,
//                 encodeURIComponent(String(reservationId))
//             );
//             const localVarUrlObj = url.parse(localVarPath, true);
//             const localVarRequestOptions = Object.assign({ method: "POST" }, options);
//             const localVarHeaderParameter = {} as any;
//             const localVarQueryParameter = {} as any;

//             localVarHeaderParameter["Content-Type"] = "application/json";

//             localVarUrlObj.query = Object.assign(
//                 {},
//                 localVarUrlObj.query,
//                 localVarQueryParameter,
//                 options.query
//             );
//             // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
//             delete localVarUrlObj.search;
//             localVarRequestOptions.headers = Object.assign(
//                 {},
//                 localVarHeaderParameter,
//                 options.headers
//             );
//             const needsSerialization =
//                 <any>"SendFeedback" !== "string" ||
//                 localVarRequestOptions.headers["Content-Type"] === "application/json";
//             localVarRequestOptions.body = needsSerialization
//                 ? JSON.stringify(contract || {})
//                 : contract || "";

//             return {
//                 url: url.format(localVarUrlObj),
//                 options: localVarRequestOptions
//             };
//         }
//     };
// };

// /**
//  * MobileReservationsApi - functional programming interface
//  * @export
//  */
// export const MobileReservationsApiFp = function (configuration?: Configuration) {
//     return {
//         /**
//          *
//          * @param {string} walkinId
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         cancel(
//             walkinId: string,
//             options?: any
//         ): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
//             const localVarFetchArgs = MobileReservationsApiFetchParamCreator(
//                 configuration
//             ).cancel(walkinId, options);
//             return (
//                 fetch: FetchAPI = portableFetch,
//                 basePath: string = BASE_PATH
//             ) => {
//                 return fetch(
//                     basePath + localVarFetchArgs.url,
//                     localVarFetchArgs.options
//                 ).then(response => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response.json();
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          *
//          * @param {CreateMobileWalkin} contract
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         create(
//             contract: any,
//             options?: any
//         ): (fetch?: FetchAPI, basePath?: string) => Promise<Booking> {
//             const localVarFetchArgs = MobileReservationsApiFetchParamCreator(
//                 configuration
//             ).create(contract, options);
//             return (
//                 fetch: FetchAPI = portableFetch,
//                 basePath: string = BASE_PATH
//             ) => {
//                 return fetch(
//                     basePath + localVarFetchArgs.url,
//                     localVarFetchArgs.options
//                 ).then(response => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response.json();
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          *
//          * @param {string} walkinId
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         get(
//             walkinId: string,
//             options?: any
//         ): (fetch?: FetchAPI, basePath?: string) => Promise<WalkinGuest> {
//             const localVarFetchArgs = MobileReservationsApiFetchParamCreator(
//                 configuration
//             ).get(walkinId, options);
//             return (
//                 fetch: FetchAPI = portableFetch,
//                 basePath: string = BASE_PATH
//             ) => {
//                 return fetch(
//                     basePath + localVarFetchArgs.url,
//                     localVarFetchArgs.options
//                 ).then(response => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response.json();
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          *
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         getData(
//             options?: any
//         ): (fetch?: FetchAPI, basePath?: string) => Promise<GuestWalkinsData> {
//             const localVarFetchArgs = MobileReservationsApiFetchParamCreator(
//                 configuration
//             ).getData(options);
//             return (
//                 fetch: FetchAPI = portableFetch,
//                 basePath: string = BASE_PATH
//             ) => {
//                 return fetch(
//                     basePath + localVarFetchArgs.url,
//                     localVarFetchArgs.options
//                 ).then(response => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response.json();
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          *
//          * @param {number} restaurantId
//          * @param {string} partySizes
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         getExpectedTime(
//             restaurantId: number,
//             partySizes: string,
//             options?: any
//         ): (fetch?: FetchAPI, basePath?: string) => Promise<ExpectedTime> {
//             const localVarFetchArgs = MobileReservationsApiFetchParamCreator(
//                 configuration
//             ).getExpectedTime(restaurantId, partySizes, options);
//             return (
//                 fetch: FetchAPI = portableFetch,
//                 basePath: string = BASE_PATH
//             ) => {
//                 return fetch(
//                     basePath + localVarFetchArgs.url,
//                     localVarFetchArgs.options
//                 ).then(response => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response.json();
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          *
//          * @param {number} [skip]
//          * @param {number} [top]
//          * @param {Date} [from]
//          * @param {Date} [to]
//          * @param {string} [statuses]
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         getGuestReservations(
//             skip?: number,
//             top?: number,
//             from?: Date,
//             to?: Date,
//             statuses?: string,
//             options?: any
//         ): (
//                 fetch?: FetchAPI,
//                 basePath?: string
//             ) => Promise<GuestReservationListResponse> {
//             const localVarFetchArgs = MobileReservationsApiFetchParamCreator(
//                 configuration
//             ).getGuestReservations(skip, top, from, to, statuses, options);
//             return (
//                 fetch: FetchAPI = portableFetch,
//                 basePath: string = BASE_PATH
//             ) => {
//                 return fetch(
//                     basePath + localVarFetchArgs.url,
//                     localVarFetchArgs.options
//                 ).then(response => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response.json();
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          *
//          * @param {number} [skip]
//          * @param {number} [top]
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         getGuestReservationsHistory(
//             skip?: number,
//             top?: number,
//             options?: any
//         ): (
//                 fetch?: FetchAPI,
//                 basePath?: string
//             ) => Promise<GuestReservationListResponse> {
//             const localVarFetchArgs = MobileReservationsApiFetchParamCreator(
//                 configuration
//             ).getGuestReservationsHistory(skip, top, options);
//             return (
//                 fetch: FetchAPI = portableFetch,
//                 basePath: string = BASE_PATH
//             ) => {
//                 return fetch(
//                     basePath + localVarFetchArgs.url,
//                     localVarFetchArgs.options
//                 ).then(response => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response.json();
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          *
//          * @param {number} [skip]
//          * @param {number} [top]
//          * @param {Date} [from]
//          * @param {Date} [to]
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         getGuestWalkinsHistory(
//             skip?: number,
//             top?: number,
//             from?: Date,
//             to?: Date,
//             options?: any
//         ): (
//                 fetch?: FetchAPI,
//                 basePath?: string
//             ) => Promise<GuestWalkinListResponse> {
//             const localVarFetchArgs = MobileReservationsApiFetchParamCreator(
//                 configuration
//             ).getGuestWalkinsHistory(skip, top, from, to, options);
//             return (
//                 fetch: FetchAPI = portableFetch,
//                 basePath: string = BASE_PATH
//             ) => {
//                 return fetch(
//                     basePath + localVarFetchArgs.url,
//                     localVarFetchArgs.options
//                 ).then(response => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response.json();
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          *
//          * @param {CreateMobileReservation} contract
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         guestAddNewReservation(
//             contract: CreateMobileReservation,
//             options?: any
//         ): (fetch?: FetchAPI, basePath?: string) => Promise<ReservationGuest> {
//             const localVarFetchArgs = MobileReservationsApiFetchParamCreator(
//                 configuration
//             ).guestAddNewReservation(contract, options);
//             return (
//                 fetch: FetchAPI = portableFetch,
//                 basePath: string = BASE_PATH
//             ) => {
//                 return fetch(
//                     basePath + localVarFetchArgs.url,
//                     localVarFetchArgs.options
//                 ).then(response => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response.json();
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          *
//          * @param {string} reservationId
//          * @param {CancelReservation} cancelReservationContract
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         guestCloseAsCanceled(
//             reservationId: string,
//             cancelReservationContract: CancelReservation,
//             options?: any
//         ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
//             const localVarFetchArgs = MobileReservationsApiFetchParamCreator(
//                 configuration
//             ).guestCloseAsCanceled(reservationId, cancelReservationContract, options);
//             return (
//                 fetch: FetchAPI = portableFetch,
//                 basePath: string = BASE_PATH
//             ) => {
//                 return fetch(
//                     basePath + localVarFetchArgs.url,
//                     localVarFetchArgs.options
//                 ).then(response => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response;
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          *
//          * @param {string} code
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         guestGetInvitation(
//             code: string,
//             options?: any
//         ): (fetch?: FetchAPI, basePath?: string) => Promise<ReservationInvitation> {
//             const localVarFetchArgs = MobileReservationsApiFetchParamCreator(
//                 configuration
//             ).guestGetInvitation(code, options);
//             return (
//                 fetch: FetchAPI = portableFetch,
//                 basePath: string = BASE_PATH
//             ) => {
//                 return fetch(
//                     basePath + localVarFetchArgs.url,
//                     localVarFetchArgs.options
//                 ).then(response => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response.json();
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          *
//          * @param {string} reservationId
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         guestGetReservationById(
//             reservationId: string,
//             options?: any
//         ): (fetch?: FetchAPI, basePath?: string) => Promise<ReservationGuest> {
//             const localVarFetchArgs = MobileReservationsApiFetchParamCreator(
//                 configuration
//             ).guestGetReservationById(reservationId, options);
//             return (
//                 fetch: FetchAPI = portableFetch,
//                 basePath: string = BASE_PATH
//             ) => {
//                 return fetch(
//                     basePath + localVarFetchArgs.url,
//                     localVarFetchArgs.options
//                 ).then(response => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response.json();
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          *
//          * @param {string} reservationId
//          * @param {PartyMembersInvitation} invitationContract
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         guestInvitePartyMembers(
//             reservationId: string,
//             invitationContract: PartyMembersInvitation,
//             options?: any
//         ): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
//             const localVarFetchArgs = MobileReservationsApiFetchParamCreator(
//                 configuration
//             ).guestInvitePartyMembers(reservationId, invitationContract, options);
//             return (
//                 fetch: FetchAPI = portableFetch,
//                 basePath: string = BASE_PATH
//             ) => {
//                 return fetch(
//                     basePath + localVarFetchArgs.url,
//                     localVarFetchArgs.options
//                 ).then(response => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response.json();
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          *
//          * @param {RedeemReservationInvitation} redeemInvitationContract
//          * @param {string} code
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         guestRedeemInvitation(
//             redeemInvitationContract: RedeemReservationInvitation,
//             code: string,
//             options?: any
//         ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
//             const localVarFetchArgs = MobileReservationsApiFetchParamCreator(
//                 configuration
//             ).guestRedeemInvitation(redeemInvitationContract, code, options);
//             return (
//                 fetch: FetchAPI = portableFetch,
//                 basePath: string = BASE_PATH
//             ) => {
//                 return fetch(
//                     basePath + localVarFetchArgs.url,
//                     localVarFetchArgs.options
//                 ).then(response => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response;
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          *
//          * @param {string} reservationId
//          * @param {CreateMobileReservation} contract
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         guestUpdateReservation(
//             reservationId: string,
//             contract: CreateMobileReservation,
//             options?: any
//         ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
//             const localVarFetchArgs = MobileReservationsApiFetchParamCreator(
//                 configuration
//             ).guestUpdateReservation(reservationId, contract, options);
//             return (
//                 fetch: FetchAPI = portableFetch,
//                 basePath: string = BASE_PATH
//             ) => {
//                 return fetch(
//                     basePath + localVarFetchArgs.url,
//                     localVarFetchArgs.options
//                 ).then(response => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response;
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         },
//         /**
//          *
//          * @param {string} reservationId
//          * @param {SendFeedback} contract
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         sendFeedback(
//             reservationId: string,
//             contract: SendFeedback,
//             options?: any
//         ): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
//             const localVarFetchArgs = MobileReservationsApiFetchParamCreator(
//                 configuration
//             ).sendFeedback(reservationId, contract, options);
//             return (
//                 fetch: FetchAPI = portableFetch,
//                 basePath: string = BASE_PATH
//             ) => {
//                 return fetch(
//                     basePath + localVarFetchArgs.url,
//                     localVarFetchArgs.options
//                 ).then(response => {
//                     if (response.status >= 200 && response.status < 300) {
//                         return response.json();
//                     } else {
//                         throw response;
//                     }
//                 });
//             };
//         }
//     };
// };

// /**
//  * MobileReservationsApi - factory interface
//  * @export
//  */
// export const MobileReservationsApiFactory = function (
//     configuration?: Configuration,
//     fetch?: FetchAPI,
//     basePath?: string
// ) {
//     return {
//         /**
//          *
//          * @param {string} walkinId
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         cancel(walkinId: string, options?: any) {
//             return MobileReservationsApiFp(configuration).cancel(walkinId, options)(
//                 fetch,
//                 basePath
//             );
//         },
//         /**
//          *
//          * @param {CreateMobileWalkin} contract
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         create(contract: CreateMobileWalkin, options?: any) {
//             return MobileReservationsApiFp(configuration).create(contract, options)(
//                 fetch,
//                 basePath
//             );
//         },
//         /**
//          *
//          * @param {string} walkinId
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         get(walkinId: string, options?: any) {
//             return MobileReservationsApiFp(configuration).get(walkinId, options)(
//                 fetch,
//                 basePath
//             );
//         },
//         /**
//          *
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         getData(options?: any) {
//             return MobileReservationsApiFp(configuration).getData(options)(
//                 fetch,
//                 basePath
//             );
//         },
//         /**
//          *
//          * @param {number} restaurantId
//          * @param {string} partySizes
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         getExpectedTime(restaurantId: number, partySizes: string, options?: any) {
//             return MobileReservationsApiFp(configuration).getExpectedTime(
//                 restaurantId,
//                 partySizes,
//                 options
//             )(fetch, basePath);
//         },
//         /**
//          *
//          * @param {number} [skip]
//          * @param {number} [top]
//          * @param {Date} [from]
//          * @param {Date} [to]
//          * @param {string} [statuses]
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         getGuestReservations(
//             skip?: number,
//             top?: number,
//             from?: Date,
//             to?: Date,
//             statuses?: string,
//             options?: any
//         ) {
//             return MobileReservationsApiFp(configuration).getGuestReservations(
//                 skip,
//                 top,
//                 from,
//                 to,
//                 statuses,
//                 options
//             )(fetch, basePath);
//         },
//         /**
//          *
//          * @param {number} [skip]
//          * @param {number} [top]
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         getGuestReservationsHistory(skip?: number, top?: number, options?: any) {
//             return MobileReservationsApiFp(configuration).getGuestReservationsHistory(
//                 skip,
//                 top,
//                 options
//             )(fetch, basePath);
//         },
//         /**
//          *
//          * @param {number} [skip]
//          * @param {number} [top]
//          * @param {Date} [from]
//          * @param {Date} [to]
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         getGuestWalkinsHistory(
//             skip?: number,
//             top?: number,
//             from?: Date,
//             to?: Date,
//             options?: any
//         ) {
//             return MobileReservationsApiFp(configuration).getGuestWalkinsHistory(
//                 skip,
//                 top,
//                 from,
//                 to,
//                 options
//             )(fetch, basePath);
//         },
//         /**
//          *
//          * @param {CreateMobileReservation} contract
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         guestAddNewReservation(contract: CreateMobileReservation, options?: any) {
//             return MobileReservationsApiFp(configuration).guestAddNewReservation(
//                 contract,
//                 options
//             )(fetch, basePath);
//         },
//         /**
//          *
//          * @param {string} reservationId
//          * @param {CancelReservation} cancelReservationContract
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         guestCloseAsCanceled(
//             reservationId: string,
//             cancelReservationContract: CancelReservation,
//             options?: any
//         ) {
//             return MobileReservationsApiFp(configuration).guestCloseAsCanceled(
//                 reservationId,
//                 cancelReservationContract,
//                 options
//             )(fetch, basePath);
//         },
//         /**
//          *
//          * @param {string} code
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         guestGetInvitation(code: string, options?: any) {
//             return MobileReservationsApiFp(configuration).guestGetInvitation(
//                 code,
//                 options
//             )(fetch, basePath);
//         },
//         /**
//          *
//          * @param {string} reservationId
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         guestGetReservationById(reservationId: string, options?: any) {
//             return MobileReservationsApiFp(configuration).guestGetReservationById(
//                 reservationId,
//                 options
//             )(fetch, basePath);
//         },
//         /**
//          *
//          * @param {string} reservationId
//          * @param {PartyMembersInvitation} invitationContract
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         guestInvitePartyMembers(
//             reservationId: string,
//             invitationContract: PartyMembersInvitation,
//             options?: any
//         ) {
//             return MobileReservationsApiFp(configuration).guestInvitePartyMembers(
//                 reservationId,
//                 invitationContract,
//                 options
//             )(fetch, basePath);
//         },
//         /**
//          *
//          * @param {RedeemReservationInvitation} redeemInvitationContract
//          * @param {string} code
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         guestRedeemInvitation(
//             redeemInvitationContract: RedeemReservationInvitation,
//             code: string,
//             options?: any
//         ) {
//             return MobileReservationsApiFp(configuration).guestRedeemInvitation(
//                 redeemInvitationContract,
//                 code,
//                 options
//             )(fetch, basePath);
//         },
//         /**
//          *
//          * @param {string} reservationId
//          * @param {CreateMobileReservation} contract
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         guestUpdateReservation(
//             reservationId: string,
//             contract: CreateMobileReservation,
//             options?: any
//         ) {
//             return MobileReservationsApiFp(configuration).guestUpdateReservation(
//                 reservationId,
//                 contract,
//                 options
//             )(fetch, basePath);
//         },
//         /**
//          *
//          * @param {string} reservationId
//          * @param {SendFeedback} contract
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         sendFeedback(reservationId: string, contract: SendFeedback, options?: any) {
//             return MobileReservationsApiFp(configuration).sendFeedback(
//                 reservationId,
//                 contract,
//                 options
//             )(fetch, basePath);
//         }
//     };
// };

// /**
//  * MobileReservationsApi - object-oriented interface
//  * @export
//  * @class MobileReservationsApi
//  * @extends {BaseAPI}
//  */
// export class MobileReservationsApi extends BaseAPI {
//     /**
//      *
//      * @param {string} walkinId
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof MobileReservationsApi
//      */
//     public cancel(walkinId: string, options?: any) {
//         return MobileReservationsApiFp(this.configuration).cancel(
//             walkinId,
//             options
//         )(this.fetch, this.basePath);
//     }

//     /**
//      *
//      * @param {CreateMobileWalkin} contract
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof MobileReservationsApi
//      */
//     public create(contract: CreateMobileWalkin, options?: any) {
//         return MobileReservationsApiFp(this.configuration).create(
//             contract,
//             options
//         )(this.fetch, this.basePath);
//     }

//     /**
//      *
//      * @param {string} walkinId
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof MobileReservationsApi
//      */
//     public get(walkinId: string, options?: any) {
//         return MobileReservationsApiFp(this.configuration).get(walkinId, options)(
//             this.fetch,
//             this.basePath
//         );
//     }

//     /**
//      *
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof MobileReservationsApi
//      */
//     public getData(options?: any) {
//         return MobileReservationsApiFp(this.configuration).getData(options)(
//             this.fetch,
//             this.basePath
//         );
//     }

//     /**
//      *
//      * @param {number} restaurantId
//      * @param {string} partySizes
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof MobileReservationsApi
//      */
//     public getExpectedTime(
//         restaurantId: number,
//         partySizes: string,
//         options?: any
//     ) {
//         return MobileReservationsApiFp(this.configuration).getExpectedTime(
//             restaurantId,
//             partySizes,
//             options
//         )(this.fetch, this.basePath);
//     }

//     /**
//      *
//      * @param {number} [skip]
//      * @param {number} [top]
//      * @param {Date} [from]
//      * @param {Date} [to]
//      * @param {string} [statuses]
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof MobileReservationsApi
//      */
//     public getGuestReservations(
//         skip?: number,
//         top?: number,
//         from?: Date,
//         to?: Date,
//         statuses?: string,
//         options?: any
//     ) {
//         return MobileReservationsApiFp(this.configuration).getGuestReservations(
//             skip,
//             top,
//             from,
//             to,
//             statuses,
//             options
//         )(this.fetch, this.basePath);
//     }

//     /**
//      *
//      * @param {number} [skip]
//      * @param {number} [top]
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof MobileReservationsApi
//      */
//     public getGuestReservationsHistory(
//         skip?: number,
//         top?: number,
//         options?: any
//     ) {
//         return MobileReservationsApiFp(
//             this.configuration
//         ).getGuestReservationsHistory(
//             skip,
//             top,
//             options
//         )(this.fetch, this.basePath);
//     }

//     /**
//      *
//      * @param {number} [skip]
//      * @param {number} [top]
//      * @param {Date} [from]
//      * @param {Date} [to]
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof MobileReservationsApi
//      */
//     public getGuestWalkinsHistory(
//         skip?: number,
//         top?: number,
//         from?: Date,
//         to?: Date,
//         options?: any
//     ) {
//         return MobileReservationsApiFp(this.configuration).getGuestWalkinsHistory(
//             skip,
//             top,
//             from,
//             to,
//             options
//         )(this.fetch, this.basePath);
//     }

//     /**
//      *
//      * @param {CreateMobileReservation} contract
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof MobileReservationsApi
//      */
//     public guestAddNewReservation(
//         contract: CreateMobileReservation,
//         options?: any
//     ) {
//         return MobileReservationsApiFp(this.configuration).guestAddNewReservation(
//             contract,
//             options
//         )(this.fetch, this.basePath);
//     }

//     /**
//      *
//      * @param {string} reservationId
//      * @param {CancelReservation} cancelReservationContract
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof MobileReservationsApi
//      */
//     public guestCloseAsCanceled(
//         reservationId: string,
//         cancelReservationContract: CancelReservation,
//         options?: any
//     ) {
//         return MobileReservationsApiFp(this.configuration).guestCloseAsCanceled(
//             reservationId,
//             cancelReservationContract,
//             options
//         )(this.fetch, this.basePath);
//     }

//     /**
//      *
//      * @param {string} code
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof MobileReservationsApi
//      */
//     public guestGetInvitation(code: string, options?: any) {
//         return MobileReservationsApiFp(this.configuration).guestGetInvitation(
//             code,
//             options
//         )(this.fetch, this.basePath);
//     }

//     /**
//      *
//      * @param {string} reservationId
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof MobileReservationsApi
//      */
//     public guestGetReservationById(reservationId: string, options?: any) {
//         return MobileReservationsApiFp(this.configuration).guestGetReservationById(
//             reservationId,
//             options
//         )(this.fetch, this.basePath);
//     }

//     /**
//      *
//      * @param {string} reservationId
//      * @param {PartyMembersInvitation} invitationContract
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof MobileReservationsApi
//      */
//     public guestInvitePartyMembers(
//         reservationId: string,
//         invitationContract: PartyMembersInvitation,
//         options?: any
//     ) {
//         return MobileReservationsApiFp(this.configuration).guestInvitePartyMembers(
//             reservationId,
//             invitationContract,
//             options
//         )(this.fetch, this.basePath);
//     }

//     /**
//      *
//      * @param {RedeemReservationInvitation} redeemInvitationContract
//      * @param {string} code
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof MobileReservationsApi
//      */
//     public guestRedeemInvitation(
//         redeemInvitationContract: RedeemReservationInvitation,
//         code: string,
//         options?: any
//     ) {
//         return MobileReservationsApiFp(this.configuration).guestRedeemInvitation(
//             redeemInvitationContract,
//             code,
//             options
//         )(this.fetch, this.basePath);
//     }

//     /**
//      *
//      * @param {string} reservationId
//      * @param {CreateMobileReservation} contract
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof MobileReservationsApi
//      */
//     public guestUpdateReservation(
//         reservationId: string,
//         contract: CreateMobileReservation,
//         options?: any
//     ) {
//         return MobileReservationsApiFp(this.configuration).guestUpdateReservation(
//             reservationId,
//             contract,
//             options
//         )(this.fetch, this.basePath);
//     }

//     /**
//      *
//      * @param {string} reservationId
//      * @param {SendFeedback} contract
//      * @param {*} [options] Override http request option.
//      * @throws {RequiredError}
//      * @memberof MobileReservationsApi
//      */
//     public sendFeedback(
//         reservationId: string,
//         contract: SendFeedback,
//         options?: any
//     ) {
//         return MobileReservationsApiFp(this.configuration).sendFeedback(
//             reservationId,
//             contract,
//             options
//         )(this.fetch, this.basePath);
//     }
// }
